cmake_minimum_required(VERSION 2.8)
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.0)
    cmake_policy(SET CMP0048 NEW)
endif()
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.1)
    cmake_policy(SET CMP0054 NEW)
endif()
project(Kadath VERSION 2.0.3.0)


# Set a default build type if none was specified (debug by default for devs, release for others)
set(default_build_type "Release")
if(EXISTS "${CMAKE_SOURCE_DIR}/.git")
    set(default_build_type "Debug")
endif()
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "Warning : setting build type to '${default_build_type}' as none was specified.")
    set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Selects the build type" FORCE)
    # Set the possible values of build type for cmake-gui
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS  "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

#The following variable is just for the config.h file to trigger a debug macro flag.
if(DEFINED CMAKE_BUILD_TYPE)
    string(TOUPPER ${CMAKE_BUILD_TYPE} STR_DEBUG_MODE)
else()
    set(STR_DEBUG_MODE DEBUG)
endif()
if(STR_DEBUG_MODE MATCHES DEBUG)
    message("Debug preprocessor macros enabled.")
    set(DEBUG_MODE ON)
else()
    message("Debug preprocessor macros disabled.")
    set(DEBUG_MODE OFF)
endif()
option(ENABLE_ASSERTS "Enables the assert preprocessor macro (useless in release build cases)" ON)
option(REMOVE_ALL_CHECKS "Remove most of the runtime range or type/tag checks for increase performances." OFF)
#User options :
option(USE_CXX_STANDARD_14 "Compile the library with C++-14 instead of 17" OFF)
option(PAR_VERSION "Parallel version" ON)
option(ENABLE_TESTING "Enable unit/functional tests using ctest." ON)
option(HAVE_LINUX "Build for linux" ON)
option(ENABLE_INTERNAL_PROFILER "Enable auto-profiling functions." ${ENABLE_TESTING})
option(ENABLE_GPU_USE "Enables the use of GPU(s) if available." OFF)
option(ENABLE_BOOST_MEMORY_POOLS "Enables the use of boost memory pools for the memory mapper instead of standard malloc call." OFF)
option(TENSOR_MOVE_SEMANTIC "Enables/disables move ctor and operators fot the Tensor class hierarchy." OFF)
set(POSSIBLE_MEMORY_MAP_TYPES vector unordered_map map flat_map)
set(MEMORY_MAP_TYPE vector CACHE STRING "Memory map container type (possible values are : ${POSSIBLE_MEMORY_MAP_TYPE})")
#set(MEMORY_MAP_TYPE_INDEX 3)
if(MEMORY_MAP_TYPE STREQUAL vector)
    set(MEMORY_MAP_TYPE_INDEX 0)
elseif(MEMORY_MAP_TYPE STREQUAL unordered_map)
    set(MEMORY_MAP_TYPE_INDEX 1)
elseif(MEMORY_MAP_TYPE STREQUAL map)
    set(MEMORY_MAP_TYPE_INDEX 2)
elseif(MEMORY_MAP_TYPE STREQUAL flat_map)
    set(MEMORY_MAP_TYPE_INDEX 3)
endif()

set(KADATH_LIBRARY_CMAKE_BUILD ON)
message ("  ")
message("Kadath-specific CMake options summary : ")
if(ENABLE_ASSERTS)
    message(" - ENABLE_ASSERTS .................: ON  - asserts are enabled, except in the release build cases")
else()
    message(" - ENABLE_ASSERTS .................: OFF - all assert statements are removed at compile time")
endif()
if(REMOVE_ALL_CHECKS)
    message(" - REMOVE_ALL_CHECKS ..............: ON  - all safety checks with runtime extra cost are removed, BEWARE !")
else()
    message(" - REMOVE_ALL_CHECKS ..............: OFF - all verifications enabled")
endif()
if(PAR_VERSION)
    message(" - PAR_VERSION ....................: ON  - building MPI parallel version")
else()
    message(" - PAR_VERSION ....................: OFF - building sequential version")
endif()
if(ENABLE_TESTING)
    message(" - ENABLE_TESTING .................: ON  - unit/functional tests based on c-test enabled (unavailable for MPI parallel builds)")
else()
    message(" - ENABLE_TESTING .................: OFF - unit/functional tests based on c-test disabled")
endif()
if(ENABLE_GPU_USE)
    message(" - ENABLE_GPU_USE .................: ON  - build hybrid Magma-based GPU / MPI version")
else()
    message(" - ENABLE_GPU_USE .................: OFF - do not build for GPU usage")
endif()
if(USE_CXX_STANDARD_14)
    set(CPP_STANDARD "14")
else()
    set(CPP_STANDARD "17")
endif()
message(" - CPP_STANDARD ...................: ${CPP_STANDARD}")
message(" - HAVE_LINUX .....................: ${HAVE_LINUX}")
message(" - ENABLE_INTERNAL_PROFILER (dev) .: ${ENABLE_INTERNAL_PROFILER}")
message(" - ENABLE_BOOST_MEMORY_POOLS (dev) : ${ENABLE_BOOST_MEMORY_POOLS}")
message(" - TENSOR_MOVE_SEMANTIC (dev) .....: ${TENSOR_MOVE_SEMANTIC}")
message(" - MEMORY_MAP_TYPE (dev) ..........: ${MEMORY_MAP_TYPE} (code ${MEMORY_MAP_TYPE_INDEX})")
message("  ")

set(CMAKE_CXX_REQUIRED OFF)
set(CMAKE_CXX_STANDARD ${CPP_STANDARD})

find_package(Boost)
if(Boost_FOUND)
    set(HAVE_BOOST TRUE)
    include_directories(${Boost_INCLUDE_DIRS})
else()
    set(HAVE_BOOST FALSE)
    set(ENABLE_BOOST_MEMORY_POOLS OFF)
endif()

if (EXISTS ${PROJECT_SOURCE_DIR}/Cmake/CMakeLocal.cmake)
    include(${PROJECT_SOURCE_DIR}/Cmake/CMakeLocal.cmake)
endif()

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/Cmake)
#set(CMAKE_MODULE_PATH ${PROJECT_BINARY_DIR})

if(PAR_VERSION)
    #file(COPY ${PROJECT_SOURCE_DIR/src_par/do_newton.cpp DESTINATION ${PROJECT_SOURCE_DIR/src/System_of_eqs/)
    find_package(MPI REQUIRED)
    set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
endif(PAR_VERSION)

if(ENABLE_GPU_USE)
    find_package(CUDA REQUIRED)
    set(MAGMA_INCLUDE_DIR $ENV{MAGMADIR}/include)
    set(MAGMA_LIB_DIR $ENV{MAGMADIR}/lib)
    set(MAGMA_LINKER_FLAGS "-L${MAGMA_LIB_DIR}")
endif(ENABLE_GPU_USE)

#Get all the src files
file(GLOB_RECURSE KADATH_SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp )

include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/include/Kadath_point_h)

if (DEFINED FFTW_INCLUDE_DIR)
    include_directories (${FFTW_INCLUDE_DIR})
endif()


#add_library(kadath ${KADATH_SOURCES})
#set_target_properties(kadath PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib COMPILE_FLAGS "-fPIC" $
#        <$<CONFIG:Debug>:-O0>)

#target_include_directories(kadath PUBLIC ${PROJECT_SOURCE_DIR}/include/Kadath_point_h ${PROJECT_BINARY_DIR}/include/)

if (EXISTS ${PROJECT_SOURCE_DIR}/Cmake/CMakeLocal.cmake)
    include(${PROJECT_SOURCE_DIR}/Cmake/CMakeLocal.cmake)
endif()
set(KADATH_SOURCES_DIRECTORY ${PROJECT_SOURCE_DIR})
set(KADATH_BUILD_DIRECTORY ${PROJECT_BINARY_DIR})
include (${PROJECT_SOURCE_DIR}/Cmake/CMakeExec.cmake)

set(KADATH_CONFIGURATION_HEADER ${PROJECT_BINARY_DIR}/include/config.h)
configure_file("${PROJECT_SOURCE_DIR}/config.h.in" "${KADATH_CONFIGURATION_HEADER}" )

if(DEFINED CUDA_INCLUDE_DIRS)
    include_directories (${CUDA_INCLUDE_DIRS})
endif()
if(DEFINED MAGMA_INCLUDE_DIR)
    include_directories(${MAGMA_INCLUDE_DIR})
endif()

add_library(kadath ${KADATH_SOURCES})
set_target_properties(kadath PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib
        COMPILE_FLAGS "-fPIC" $ <$<CONFIG:Debug>:-O0>
        PRIVATE_HEADER ${KADATH_CONFIGURATION_HEADER}
        PUBLIC_HEADER "${KADATH_HEADERS}")

target_include_directories(kadath PUBLIC ${PROJECT_SOURCE_DIR}/include/Kadath_point_h ${CMAKE_BINARY_DIR}/include/)


message("  ")
message("C++ compiler : ${CMAKE_CXX_COMPILER}")
message("C++ standard version : ${CMAKE_CXX_STANDARD}")
if(PAR_VERSION)
    message("C++ MPI wrapper : ${MPI_CXX_COMPILER}")
endif()
message("External libraries summary (empty if not found) :")
message(" - threads   :  ${CMAKE_THREAD_LIBS_INIT}")
message(" - GSL       :  ${GSL_LIBRARIES}")
message(" - PGPLOT    :  ${PGPLOT_LIBRARIES}")
message(" - FFTW      :  ${FFTW_LIBRARIES}")
message(" - LAPACK    :  ${LAPACK_LIBRARIES}")
message(" - SCALAPACK :  ${SCALAPACK_LIBRARIES}")
if(ENABLE_GPU_USE)
    message(" - CUDA TOOLKIT : ")
    message("            # CUDA_INCLUDE_DIRS = ${CUDA_INCLUDE_DIRS}")
    message("            # CUDA_LIBRARIES = ${CUDA_LIBRARIES}")
    message("            # CUDA_CUBLAS_LIBRARIES = ${CUDA_CUBLAS_LIBRARIES}")
    message("            # CUDA_cusparse_LIBRARY = ${CUDA_cusparse_LIBRARY}")
    message(" - MAGMA : ")
    message("            # MAGMA_INCLUDE_DIR = ${MAGMA_INCLUDE_DIR}")
    message("            # MAGMA_LIB_DIR = ${MAGMA_LIB_DIR}")
    message("            # MAGMA_LIBRARIES = ${MAGMA_LIBRARIES}")
endif()
message("  ")
message("Build directory : ${CMAKE_BINARY_DIR}")
message("  CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")
message("  PROJECT_BINARY_DIR = ${PROJECT_BINARY_DIR}")

#option to compile with google thread-sanitizer
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread -fPIE -pie -g")
#option to compile with google address-sanitizer
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -O1 -fno-omit-frame-pointer -g")

#add the tests directory
message("   ")
if(ENABLE_TESTING)
    message("Including the tests directory...")
    enable_testing()
endif(ENABLE_TESTING)
add_subdirectory(tests)

find_package(Doxygen)
if(DOXYGEN_FOUND)
    message("   ")
    message("Building documentation input file...")
    set(DOXYGEN_GENERATE_LATEX YES)
    set(INPUT_FILES_FOR_DOXIGEN ${KADATH_SOURCES} ${KADATH_HEADERS} ${PROJECT_SOURCE_DIR}/doc/kadath.cpp)
    set(DOXYGEN_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/doc)
    set(DOXYGEN_EXCLUDE ${PROJECT_SOURCE_DIR}/include/Kadath_point_h ${PROJECT_SOURCE_DIR}/tests ${PROJECT_SOURCE_DIR}/tutorials ${PROJECT_SOURCE_DIR}/codes)
#    set(DOXYGEN_EXCLUDE_PATTERNS )
    doxygen_add_docs(doc ${INPUT_FILES_FOR_DOXYGEN})
endif()
message("  ")

include(GNUInstallDirs)
install(TARGETS kadath DESTINATION ${CMAKE_INSTALL_LIBDIR}
        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/kadath
        PRIVATE_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/kadath)
if(PAR_VERSION)
    install(TARGETS ${MISNER_SEQ} ${SCHWARZ_SEQ} ${KERR_SEQ}
            DESTINATION ${CMAKE_INSTALL_BINDIR}/sequential)
else()
    install(TARGETS ${BOSON_TARGETS}
            DESTINATION "${CMAKE_INSTALL_BINDIR}/parallel/boson")
    install(TARGETS ${KERR_MPI_TARGETS}
            DESTINATION "${CMAKE_INSTALL_BINDIR}/parallel/kerr")
    install(TARGETS ${MISNER_MPI} ${SCHWARZ_MPI} DESTINATION "${CMAKE_INSTALL_BINDIR}/parallel")
endif()
