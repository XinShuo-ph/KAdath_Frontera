The following documents the basic use of the BNS solver. 

The code base consists of the following codes handling a BNS system solved using the XCTS system of equations
together with the first integral of the Euler equation and the velocity potential of the irrotational part
of the fluid velocity.

The stellar configurations in the binary are determined by the set of parameters consisting of the baryonic mass, 
the (approximate) quasi-local dimensionless spin angular momentum (or a fixed angular frequency parameter) and
the corresponding ADM mass of each star at infinite separation / in isolation. These three parameters are input parameters and
specifically the ADM mass has to be set correctly from an isolated single (spinning) star solution with the same baryonic mass
(if the stars are irrotational the ADM mass is only used to compute the mass ratio).
If these are not updated collectively and correctly on changes of one of the stellar parameters, the solution
represents "some" solution, with the dimensionless spin and the mass ratio being calculated inconsistently.

  1) setup.cpp
  2) reader.cpp
  3) solve.cpp
  4) increase_resolution.cpp

Each dataset, regardless of the code used, will consist of two files: 
  <filename>.info, <filename>.dat.

The <filename>.info is the configuration file that both documents important parameters, but also steers the various codes.
This will be discussed in more detail in the relevant sections below.  The configuration file is currently implemented using
BOOST python trees using their propretary INFO format.  Details on the implementation can be reviewed in the source files
contained in: 
  $HOME_KADATH/include/Configurator/

The configurator uses meaningful array indexes which are defined in
  $HOME_KADATH/include/Configurator/config_enums.hpp
  $HOME_KADATH/src/Utilities/Configurator/config_enums.cpp

This allows for easily extending the index capabilities while not impacting the underlying algorithms within the Configurator.
Within the configuration file, the "initial" stores the starting setup of the BH for book keeping purposes only.
Changes to the initial data are done in the BH section below the initial section.

The associated <filename>.dat file contains the numerical space and its domain decomposition as well as the fields defined
in this space, both constructed by means of the Kadath library.  If one loses the DAT file, the INFO file can be used to
regenerate an initial guess for the dataset using the `setup` code.  However, if one loses the INFO file,
it is not possible to easily reconstruct the dataset, since important parameters are stored in there.

#########
setup.cpp
#########
`setup` is used to initialize the numerical space and fields prior to solving the system of equations.  It is highly encouraged
to run this at a low resolution of 9 collocation points (per domain and direction) before going to higher resolution.
This will be discussed further shortly.

Use of `setup` can be done two different ways:
  1) Run setup with a previous solved 3D NS solution. (e.g. `setup ns.info`).  This will default to 45 km separation
  2) Run `setup ns.info <dist>` where distance is in km. 

The output of `setup` will always be 'initbin.info' and 'initbin.dat'.
`setup` will generate an initial guess for an equal mass, i.e. q=1 binary using the input star.
Such a first (low resolution) solution should be obtained by using the TOTAL stage before attempting
to modify the binary (i.e, component masses, spin, etc).

Note:
The setup will import all the EOS and characteristic parameters of the single NS into the binary configuration.
However, when attempting  to alter the binary (e.g. mass, spin, etc), one needs to manually enter the correct values of
MADM, MB, and CHI of the isolated stars in the binary configuration file.
More details on why that is will be discussed in the solve and import section.
For more details about the EOS, see the single 3D NS codes README in the codes/NS directory.

#########
solve.cpp
#########
`solve` will attempt to find a solution to the system of equations based on an input dataset - either from `setup` or from a previous solution.

`solve` currently consists of the following stages:
  TOTAL:
    In this stage, the full system of equations is solved, i.e. the XCTS equations, the (approximate) first integral of the Euler equation,
    the velocity potential equation together with the constraints on the baryonic mass, the dimensionless spin of the stars as well as the 
    force-balance at the center of them.
    Rigidly rotating stars are solved for based on their ADM mass (MADM) at infinite separation (i.e. the ADM mass from an equivalent star in
    isoloation, e.g. from the 3D NS solver). Every time the baryonic mass and/or dimensionless spin of a star is changed, at the same time
    the correct MADM of the equivalent star has to be provided as an input parameter.
    The orbital frequency and "center of mass" shift are computed using the force-balance equations at the center of the stars, also fixing the
    position of the stellar centers to the given stellar domain centers, however, in the case of significantly unequal mass binaries, residual
    linear momentum of the spacetime remains since the system of equations would be over-determined if in addition the linear momentum
    would be solved for explicitly. When computing a new configuration (i.e. changes to mass, spin, etc), this stage
    is critical since it is the only stage that fully solves the hydrostatic equilibrium of the stars.
    The later stages only rescale the matter to remove the aforementioned linear momentum or orbital eccentricity.

  TOTAL_BC:
    In this stage, the system of equations is solved without the first integral and use a fixed orbital frequency from the previous stage.
    The matter distribution is rescaled such that each star achieves the correct baryonic mass, since the velocity field of the
    stars is changing slightly in the process.
    This assumption is a tradeoff to be able to enforce, at the same time, a vanishing of the ADM linear momentum at infinity to remove
    unwanted drifts of center of mass due to asymmetries in the binary. Note however, that these drifts could in principle also be cured by
    fixes on the evolution side, since the solutions from TOTAL and TOTAL_BC follow the same inspiral trajectory igoring the center of mass drifts.
  
  ECC_RED:
    This stage is essentially the same as TOTAL_BC, only now fixed values of the orbital frequency (ECC_OMEGA) and the radial infall
    velocity (ADOT) are used, enabling a iterative reduction of the orbital eccentricity.
    If these values are not included or USE_PN is enabled, then 3.5PN estimates will be employed to determine ECC_OMEGA and ADOT.
    Tests have shown that these are, in the sense of orbital eccentricity, superior w.r.t. the orbital frequency given by the force-balance
    equations in TOTAL and therefore should always be employed, even when no iterative reduction is carried out.
    It should be noted though, that still both stages TOTAL and TOTAL_BC have to be solved for first, since these give reasonable values
    for the orbital frequency and "center of mass" shift due to asymmetries in the binary. The ECC_RED stage depends on these given values
    and represents an additional correction.

Unlike for the binary black holes, to make iterative changes to the system or to increase the resolution of the binary, one must rerun all stages of
the BNS solver. The only time saver is to run the TOTAL stage at low resolution (i.e. 9 colocation points in each domain and direction)
and make any iterative changes to the spin or mass ratio before increasing the resolution, prior to running TOTAL_BC and ECC_RED stages for the final dataset.
Nonetheless models at resolution as low as 9 colocation points in each domain and direction have been tested to converge in all cases considered,
up to extreme spins and mass ratios.

Notes:
  1) An output directory can be specified, but is optional (e.g. `solve initbin.info <outputdir>`).
  
  2) As noted previously, the fixed values of each NS must be entered manually when making changes from the initial setup.  These values need to be
     updated in the configuration file by manually changing MADM, CHI, and MB for each star. All other values will be updated automatically as needed
     by the relevant codes.  Alternatively, one can use the helper code "import_data" to copy these values over.  See "import_data" section below.
  
  3) Changing Q in the configuration file has no effect. Q is updated everytime the solver is ran based on the ratio of the ADM masses
     Q = (MADM, BCO2) / (MADM, BCO1), where MADM is a fixed input value.
  
  4) Solving the TOTAL stage from the initial setup of the binary takes approximate 49min on 128 cores for low resolution (9 pts).
     Solving TOTAL_BC and ECC_RED from a previous, irrotational, equal mass solution from TOTAL takes, approximately, an additional 25min.
     In general increasing the number of colocation points n_c scales as ~n_c^3 and the Jacobian with the number of unknows n_u as ~n_u^2,
     leading to a rapid increase of the linearized system solved in the Newton iteration. The limiting factor is mostly memory,
     because the complete Jacobian has to held in memory (splitted over all MPI ranks though).
  
  5) In certain cases, especially when going to highly asymmetric mass ratios or extreme spin states, the domain decomposition may no longer be
     optimal and can cause the solver to not converge completely at low resolution (e.g. oscillated around 1e-7).
     One potential solution is to run `increase_resolution` on one of the later checkpoints without changing the resolution.
     This will automatically aim to optimize the domain decomposition while providing an excellent 'initial guess' to the solver.
  
  6) For each NS, one can set "fixed_omega" which will force the rotation velocity of the NS to be a specific (coordinate dependent) value of omega.
     CHI is therefore ignored if this value is set and MADM becomes inconsistent (there's the quasi-local MADM though).

Optional Controls:
  The following are optional controls that can be enabled in the configuration file to produce niche datasets:

  corot_binary: 
    In this case, the binary is solved with both stars, each fixed by their baryonic mass only, corotating with the orbital frequency at the
    given separation.  For the ADM mass the quasi-local measurement of MADM is the only estimate that can be made on the NS, and, therefore,
    MADM is set to equal QLMADM at the end of the run.

  delete_shift:
    This control deletes the shift on import. In very rare cases this is ever helpful and primarily exists for testing.

  checkpoint:
    Will increase the checkpoints through all the stages.  This can be helpful if a stage does not fully converge and one wants 
    to start from an intermediate checkpoint.  With this off, the minimal checkpointing is done at the end of each stage.

  use_pn: 
    If this control is activated, regardless of the values stored in ADOT and ECC_OMEGA, 3.5PN estimates will be used during the ECC_RED stage.

#########
import_data.cpp
#########
`import_data` takes a given binary configuration file and imports the stellar parameters from two single 3D NS solutions, while not altering
the scalar fields, i.e. lapse, shift, conformal factor and matter distribution. By running

  import_data <binary>.info <NS1>.info <NS2>.info

a new configuration file is written to `import.info` and the binary data file is copied to `import.dat`.
This small program is meant as a simple way to change the stellar parameters consistently in an already converged binary solution.
As long as the changes are not extreme, the previous solution should represent a very good initial guess for the new binary
configuration and convergence should be achieved in a few steps, down to single steps per stage depending how large the changes
to the stars are.

#########
increase_resolution.cpp
#########

`increase_resolution` is designed to minimize computation time by running `solve` at low resolution initially (e.g. BIN_RES 9) and only run at
high resolution once for the final dataset. The initial guess is simply the low resolution solution interpolated onto the new computation domain
using the spectral representation of the solution fields.

The computational domain is also modified slightly based on the MIN and MAX values of the NS surface radius to allow for a better domain decomposition.
As noted in the section discussing `solve`, this can be used to simply reinterpolate the solution onto a new domain decomposition in the scenario when
a low resolution dataset isn't fully convergent (i.e. oscillates around 1e-7).

By running

  increase_resolution <filename>.info <base_outputname> <res>

it will result in the generation of a <base_outputname>.<info/dat> dataset with a resolution of <res> in each spatial direction in each domain.
One then needs to rerun all the BNS stages to obtain a consistent solution, which should converge in fewer steps in the case of the TOTAL stage.

#########
reader.cpp
#########
`reader` is a basic reader that prints out useful information that is obtained from the system of equations.  The vast majority of the output values 
are calculated (i.e not pulled from the configuration file) and are meant to serve as a first way to analyze and determine the valididity of the solution.
This also provides the users an example should they wish to add additional quantities to the reader to meet their needs, showing how to use the
Kadath infrastructure to compute derived quantities.

#########
Example test case - generating a 1.4MSol, q=1, 46km, irrot BNS from scratch:
#########
  1) run `setup converged_NS_1.4.0.09.info 46` to an initial setup with 46km separation
  2) run `mpirun -np <num_procs> solve initbin.info` - the final solution should be converged_BNS_TOTAL.31.1442.0.0.2.8.q1.09.<info/dat>
  3) run `reader converged_BNS_TOTAL.31.1442.0.0.2.8.q1.09.info` to see interesting diagnostics
  Note: if you intend to use this solution for evolutions, activate TOTAL_BC and ECC_RED stages before running solve

#########
Example test case - iterative changes to our new BNS solution - q = 0.7, mixed spin, 11 collocation points
#########
  1) run `import_data converged_BNS_TOTAL.31.1442.0.0.2.8.q1.09.info ../NS/out/converged_NS_total_bc.2.-0.3.09.info ../NS/out/converged_NS_total_bc.1.4.0.1.09.info` 
  2) run `mpirun -np <num_procs> solve import.info` - the final solution should be converged_BNS_TOTAL.31.1442.0.1.-0.3.3.4.q0.7.09.<info/dat>
  3) run `increase_resolution converged_BNS_TOTAL.31.1442.0.1.-0.3.3.4.q0.7.09.info initbin 11`
  2) run `mpirun -np <num_procs> solve initbin.info` - the final solution should be converged_BNS_TOTAL.31.1442.0.1.-0.3.3.4.q0.7.11.<info/dat>
  Note: if you intend to use this solution for evolutions, activate TOTAL_BC and ECC_RED stages before running solve using the high resolution dataset

