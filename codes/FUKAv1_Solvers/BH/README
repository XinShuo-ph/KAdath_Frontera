The following documents the basic use of the 3D BH solver included here.

The code base consists of the following codes handling a 3D BH using the XCTS system of equations
as discussed in: https://arxiv.org/abs/2103.09911

  1) setup.cpp
  2) reader.cpp
  3) solve.cpp
  4) increase_resolution.cpp

Each dataset, regardless of the code used, will consist of two files: 
  <filename>.info, <filename>.dat.

The <filename>.info is the configuration file that both documents important parameters, but also steers the various codes.
This will be discussed in more detail in the relevant sections below.  The configuration file is currently implemented using
BOOST python trees using their propretary INFO format.  Details on the implementation can be reviewed in the source files
contained in: 
  $HOME_KADATH/include/Configurator/

The configurator uses meaningful array indexes which are defined in 
  $HOME_KADATH/include/Configurator/config_enums.hpp
  $HOME_KADATH/src/Utilities/Configurator/config_enums.cpp

This allows for easily extending the index capabilities while not impacting the underlying algorithms within the Configurator.
Within the configuration file, the "initial" stores the starting setup of the BH for book keeping purposes only.
Changes to the initial data are done in the BH section below the initial section.

The associated <filename>.dat file contains the numerical space and fields generated and used with Kadath.  If one loses the
DAT file, the INFO file can be used to regenerate the dataset using the `setup` code.  However, if one loses the INFO file,
it is not possible to easily reconstruct the dataset.

#########
setup.cpp
#########
setup.cpp is used to initialize the numerical space and fields prior to solving the system of equations.  It is highly encouraged
to run a low resolution of 9 collocation points before going to higher resolution.  This will be discussed further shortly.

Use of `setup` can be done two different ways:
  1) Run `setup` without any arguments will result in a default setup which will produce a 0.5Msol BH estimate stored in initbh.<info/dat>
  2) Run `setup` with a pre-configured *.info file. This will generate an a numerical setup (DAT file) that reflects the values in the
     configuation file using MCH and CHI.  Values of the radii will be determined internally.

The output of `setup` is always 'initbh.info' and 'initbh.dat'.

When starting from scratch without prior datasets: 
- run `setup` by itself to generate the default dataset.  
- Edit the config file with the MCH and CHI of interest before running `setup initbh.info`.  
The dataset will be updated with the correct initial guess to be ran in the solver.

#########
solve.cpp
#########
`solve` will attempt to find a solution to the system of equations based on an input dataset - either from `setup` or from a previous solution.

`solve` currently consists of the following stage:
  PRE: Note, this stage is not required and can cause issues if ran before solving TOTAL_BC which is why it is disabled by default.
  In the PRE stage, the shift is ignored and only PSI and ALPHA are preconditioned.  With that said, this stage is necessar 
  if one wishes to generate initial data using the fixed lapse condition via the TOTAL stage.

  TOTAL: Note, this stage is not required and can cause issues if ran before solving TOTAL_BC which is why it is disabled by default.
  In this stage, the full system of equations is solved including those that are a function of the shift.  In this stage, rotating BHs
  can be solved for using (MCH) and spin parameter (CHI).  The lapse is fixed on the excision boundary by a fixed value (FIXED_LAPSE) in the
  config file.  That said, it has been shown by Cook, Pfeiffer, et al to give unreasonable estimates for BHs especially in binary configurations.
  Therefore, we restrict the setup and solver codes to TOTAL_BC by default, but we leave this infrastructure in place for the interested user.

  TOTAL_BC: This stage is the only recommended stage for generating a BH.  This stage solves the full system of equations 
  including those that are a function of the shift.  In this stage, rotating BHs can be solved for using (MCH) and spin 
  parameter (CHI) while the lapse is fixed on the excision boundary by a von Neumann condition,d(\alpha \psi)/dr = 0.

One can start from a previous solution and make iterative changes to MCH and CHI to obtain additional solutions by only running the TOTAL_BC stage,
however, large changes to MCH are best done from a fresh setup as discussed in the 'setup' section.

NOTE:
1) An output directory can be specified, but is optional.
2) On 128 cores, the full solver takes approximately 3MIN to converge with the default setup

#########
increase_resolution.cpp
#########
`increase_resolution` is designed to minimize computation by running `solve` at low resolution initially (e.g. BCO_RES 9) and only run at high resolution
for the final stage.  The initial guess is simply the low resolution solution interpolated onto the new computation domain.  The computational domain
is also modified slightly based on the surface radius of the BH to allow for a stable domain decomposition.

increase_resolution <filename>.info <basefilename> <res>
this will result in the generation of <basefilename>.<info/dat> dataset

Again, one only needs to rerun the last stage the solution is from (e.g. TOTAL_BC, etc).

#########
reader.cpp
#########
`reader` is just a basic reader that prints out useful information that is obtained from the system of equations.  The vast majority of the output values 
are calculated (i.e not pulled from the configuration file) and are meant to serve as a way to determine the validity of the solution.

#########
Example test case - generating a 1MSol BH from scratch:
#########
  1) run `setup` to generate the default dataset
  2) open initbh.info in a text editor
  3) change "mch" from 0.5 to 1.0
  4) run `setup initbh.info`
  5) run `solve initbh.info` - the final solution should be converged_BH.1.0.0.09.<info/dat>
  6) run `reader converged_BH.1.0.0.09.info` to see interesting diagnostics

#########
Example test case - iterative solution resulting in 1MSol with \chi = 0.3 with resolution 11
#########
Note: it's recommended to copy a previous solution into a default file before modifying.
  1) copy converged_BH.1.0.0.09.<info/dat> to initbh.<info/dat>
  2) open initbh.info in a text editor
  3) change "chi" from 0 to 0.3
  4) run `solve initbh.info` - the final solution should be converged_BH.1.0.3.09.<info/dat>
  5) run `increase_resolution converged_BH.1.0.3.09.info initbh 11`
  6) run `solve initbh.info` - the final solution should be converged_BH.1.0.3.11.<info/dat>
