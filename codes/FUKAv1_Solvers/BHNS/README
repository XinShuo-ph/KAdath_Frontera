The following documents the basic use of the BHNS solver. 

The code base consists of the following codes handling a BNS system solved using the XCTS system of equations
together with the first integral of the Euler equation and the velocity potential of the irrotational part
of the fluid velocity.

The stellar configuration in the binary is determined by the set of parameters consisting of the baryonic mass, 
the (approximate) quasi-local dimensionless spin angular momentum (or a fixed angular frequency paramter) and
the corresponding ADM mass of the star at infinite separation / in isolation. These three parameters are input parameters and
specifically the ADM mass has to be set correctly from an isolated single (spinning) star solution with the same baryonic mass
(if the star is irrotational the ADM mass is only used to compute the mass ratio).
If these are not updated collectively and correctly on changes of one of the stellar parameters, the solution
represents "some" solution, with the dimensionless spin and the mass ratio being calculated inconsistently.

  1) setup.cpp
  2) reader.cpp
  3) solve.cpp
  4) increase_resolution.cpp

Each dataset, regardless of the code used, will consist of two files:

  <filename>.info, <filename>.dat.

The <filename>.info is the configuration file that both documents important parameters, but also steers the various codes.
This will be discussed in more detail in the relevant sections below.  The configuration file is currently implemented using
BOOST python trees using their propretary INFO format.  Details on the implementation can be reviewed in the source files
contained in: 
  $HOME_KADATH/include/Configurator/

The configurator uses meaningful array indexes which are defined in
  $HOME_KADATH/include/Configurator/config_enums.hpp
  $HOME_KADATH/src/Utilities/Configurator/config_enums.cpp

This allows for easily extending the index capabilities while not impacting the underlying algorithms within the Configurator.
Within the configuration file, the "initial" stores the starting setup of the BH for book keeping purposes only.
Changes to the initial data are done in the BH section below the initial section.

#########
setup.cpp
#########
`setup` is used to initialize the numerical space and fields prior to solving the system of equations.  It is highly encouraged
to run this at a low resolution of 9 collocation points (per domain and direction) before going to higher resolution.
This will be discussed further shortly.

Use of `setup` can only be run as follows:
  - Run `setup` with a previous solved BNS solution and an isolated BH solution, e.g. `setup bns.info bh.info` 
  - The BNS must be solved using only the TOTAL stage and can be of low resolution.
  - The BNS must be the same separation distance as what is needed for the BHNS.
  - Ideally, the intial binary should be equal mass and irrotational, but there is some flexibility.

The output of `setup` is always 'initbin.info' and 'initbin.dat'.  A solution should be obtained for using the 
TOTAL_BC stage before attempting to modify the binary (i.e. mass ratio, spin).

Note:
The setup will import all the values and copy them to the binary configuration.  However, when attempting to alter the binary
(e.g. mass, spin, etc), one needs to manually enter the values of MADM, MB, and CHI for the NS and MCH and CHI for the BH
into the configuration file. Q is calculated based on the ratio Q = (MADM, BCO1) / (MCH, BCO2)
For more details about the EOS, see the single 3D NS codes README in the codes/NS directory.

#########
solve.cpp
#########
`solve` will attempt to find a solution to the system of equations based on an input dataset - either from `setup` or from a previous solution.

`solve` currently consists of the following stages:
  TOTAL:
    In this stage, the full system of equations is solved, i.e. the XCTS equations, the (approximate) first integral of the Euler equation,
    the velocity potential equation together with the constraints on the baryonic mass, the dimensionless spin as well as the 
    force-balance at the center of the star.
    A rigidly rotating star is solved for based on their ADM mass (MADM) at infinite separation (i.e. the ADM mass from an equivalent star in
    isoloation, e.g. from the 3D NS solver). Every time the baryonic mass and/or dimensionless spin of the star is changed, at the same time
    the correct MADM of the equivalent star has to be provided as an input parameter.
    The orbital frequency and "center of mass" shift are computed using the force-balance equation at the center of the star, also fixing the
    position of the stellar center to the given stellar domain center, together with enforcing a vanishing ADM linear momentum at infinity.

  TOTAL_BC:
    In this stage, the full system of equations is again solved, however, the lapse condition on the BH excision region is now the von Neumann BC.
  
  ECC_RED:
    In this stage, the orbital velocity, "global_omega", is fixed and the addition of the radial infall velocity term "adot" is introduced in order
    to reduce the eccentricity of the binary. If an estimate is not provided by setting "adot" and (ECC_OMEGA), or if (USE_PN) control is enabled,
    PN estimates of "adot" and "global_omega" are used. Since "global_omega" is now fixed, the matter is rescaled such as in the TOTAL_BC and ECC_RED stages of
    the BNS solver.

NOTE: Akin to the BNS solver, stages that only rescale the matter cannot be ran directly after increasing the resolution of the solution.  In this case,
one must rerun (TOTAL_BC) before rerunning (ECC_RED) in order to get a consistent solution.

NOTE:
  1) An output directory can be specified, but is optional.

  2) As noted previously, the fixed values of the NS and BH must be entered manually when making changes from the initial setup.  These values need to be
     updated in the configuration file by manually changing MADM, CHI, and MB for NS, and, MCH and CHI for the BH.  All other values will be updated by the respective codes.

  3) Changing Q in the configuration file has no effect. Q is updated everytime the solver is ran based on the ratio of q = MADM / MCH

  4) For small separation distances (e.g. 45km), the solver can have difficulty converging at low resolution, res = 9, in the TOTAL_BC stage.
     This can result in the solver hitting a precision limit on the order of ~10^-8.  In these cases, one can run increase resolution from the
     TOTAL solution or one of the intermediate solutions, to obtain a better initial guess for continued solving. Going to higher resolution also
     helps but is computationally more expensive and should only be considered for the final dataset.

  5) The TOTAL stage is only used for the initial solution and should not be used for doing resolution increases or changes of the NS/BH parameters as it
     results in unstable solving behavior. TOTAL_BC is much more reliable in these regards and, therefore, is the recommended stage for iterative solutions.
     As such, TOTAL stage is deactivated by default once a solution converges fully.

#########
increase_resolution.cpp
#########
`increase_resolution` is designed to minimize computation by running `solve` at low resolution initially (e.g. "res" 9) and only run at high resolution
for the final stage.  The initial guess is simply the low resolution solution interpolated onto the new computation domain.  The computational domain
is also modified slightly based on the MIN and MAX values of the NS surface radius to allow for a stable domain decomposition and making additional estimates
of the BH radii based on the intended mass, MCH.  As noted in the section discussing `solve`, this can be used to simply reinterpolate the solution 
onto a new domain decomposition in the scenario when a low resolution isn't converging fully (i.e. oscillates around 1e-7).

by running:
increase_resolution <path>/<filename>.info <base_outputname> <res>

this will result in the generation of <base_outputname>.<info/dat> dataset in the current directory unless a different directory is included
in <base_outputname> (e.g. `increase_resolution converged.info ./new/data 9` )

Again, one need only to rerun the latest stages to obtain a consistent solution.  In the case of starting from a ECC_RED solution, starting at TOTAL_BC
is necssary in order to resolve the matter in a consistently.

Additionally, in the input configuration file <filename>.info, one can also modify the numer of shells outside of the BH before running increase_resolution.
These shells are only added automatically during the initial setup to ensure proper resolution is available for the TOTAL stage, however, it's up to the
user whether these shells need to remain or if more are needed.

#########
reader.cpp
#########
`reader` is just a basic reader that prints out useful information that is obtained from the system of equations.  The vast majority of the output values 
are calculated (i.e not pulled from the configuration file) and are meant to serve as a way to determine the valididity of the solution.

#########
Example test case - generating a 1.4MSol, q=1, dist=46km, irrot BHNS from scratch:
#########
  1) run `setup ../BNS/out/converged_BNS_TOTAL.31.1442.0.0.2.8.q1.09.info ../BH/out/converged_BH_1.4.0.09.info`
  2) run `mpirun -np <num_procs> solve initbin.info` - the final solution should be converged_BHNS_TOTAL_BC.31.1442.0.0.2.8.q1.09.<info/dat>
  3) run `reader converged_BHNS_TOTAL_BC.31.1442.0.0.2.8.q1.09.info` to see interesting diagnostics
  Note: if you intend to use this solution for evolutions, activate ECC_RED stages before running solve

#########
Example test case - iterative generation of q=0.4, dist=46km BHNS with \chi != 0
#########
  1) copy converged_BHNS_TOTAL_BC.31.1442.0.0.2.8.q1.09.<info/dat> to initbin.<info/dat>
  2) open initbin.info in a text editor
    2.1) update values for the NS ("madm", "mb", and "chi") - 1.4, 1.5517, 0.1
    2.2) update values for the BH ("mch", "chi").
      2.2.1) the mass ratio q can be changed by ~0.2 each iteration until q=0.4 is reached.  Therefore, MCH can take values of
        mch = (madm / q).  The first iteration in this setup would then be mch = (1.4 / 0.8) = 1.75.
  3) run `solve initbin.info` - each iterative solution should be converged_BHNS.30.4672.0.1.0.<M total>.q<q>.09.info in the case of an irrotational BH.
  4) Make a copy of the dataset and repeat (2.2) and (3) until a solution for q = 0.4 has been obtained.
  Note: 
    a) if you intend to use this solution for evolutions, activate ECC_RED stages before running solve for the final configuration
    b) going lower than q = 0.4, the system becomes more sensitive and the domain decomposition will also need to be modified using increase_resolution.  Also, the
      solver will be increasingly sensitive depending on the separation distance between to two objects as the bi-spherical domains will get squeezed as ROUT increases
