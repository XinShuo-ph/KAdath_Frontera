The following documents the basic use of the 3D BBH solver included here.

The code base consists of the following codes handling a 3D BBH using the XCTS system of equations
as discussed in: https://arxiv.org/abs/2103.09911

  1) setup.cpp
  2) reader.cpp
  3) solve.cpp
  4) increase_resolution.cpp

Each dataset, regardless of the code used, will consist of two files: 

  <filename>.info, <filename>.dat.

The <filename>.info is the configuration file that both documents important parameters, but also steers the various codes.
This will be discussed in more detail in the relevant sections below.  The configuration file is currently implemented using
BOOST python trees using their propretary INFO format.  Details on the implementation can be reviewed in the source files
contained in: 
  $HOME_KADATH/include/Configurator/

The configurator uses meaningful array indexes which are defined in
  $HOME_KADATH/include/Configurator/config_enums.hpp
  $HOME_KADATH/src/Utilities/Configurator/config_enums.cpp

The associated <filename>.dat file contains the numerical space and fields generated and used with Kadath in a binary format.
If one loses the DAT file, the INFO file can be used to regenerate an initial guess for the dataset using the `setup` code.
However, if one loses the INFO file, it is not possible to easily reconstruct the dataset.

#########
setup.cpp
#########
`setup` is used to initialize the numerical space and fields prior to solving the system of equations.  It is highly encouraged
to run this at a low resolution of 9 collocation points (per domain and direction) before going to higher resolution.
This will be discussed further shortly.

Use of `setup` can be done two different ways:

  1) Run `setup` without any arguments will result in a default setup which will produce
     a BBH with a total mass of 1 M at a separation of 10 M (M being some mass scale)

  2) Run `setup` with a pre-configured *.info file. This will generate a domain decomposition and initial guesses of
     the fields (DAT file) that reflects the values in the configuation file such as the the BH characteristics and resolution.

The output of `setup` is always 'initbin.info' and 'initbin.dat'.

It is important to note that the solver is very sensitive to the initial guess for the radius and fixed lapse of the BBH.  
The following recommendations should be considered when using the current release:

  1) Solve a simple setup first (i.e. the default 1 M irrotational BBH) before attempting changing mass ratio or spin.

  2) If a separation distance other than 10 M is required, generate and modify the default dataset, change the distance to the 
     desired value, and run `setup initbin.info` to obtain the new setup.

  3) Running setup will always reset the fields stored in the initbin.dat file to their most primitive estimate.

#########
solve.cpp
#########
`solve` will attempt to find a solution to the system of equations based on an input dataset - either from `setup` or from a previous
(converged or not) dataset.

`solve` currently consists of the following stages:
  PRE: 
    The pre-stage will solve the Laplace equations for the lapse alone as well as multiplied with the conformal factor
    with the given boundary conditions at infinity, only based on a BH of a given excision radius estimate (RMID) and a lapse on the
    excision boundary (FIXED_LAPSE) as specified in the configuration file. The shift is not considered in this stage.

  FIXED_OMEGA: 
    The masses are fixed as equal using the mass of BH1, Omega is fixed using the Keplerian estimate, and the binary is
    corotating with the binary orbital frequency as these further reduces the degrees of freedom in the system.

  COROT_EQUAL:
    This is the same as FIXED_OMEGA, only now the orbtal frequency is fixed by the quasi-equilibrium constraint Madm - Mk = 0.
  
  TOTAL: 
    In this stage, the full system of equations is solved, the component (Christodoulou) masses (MCH) and spin (CHI or FIXED_OMEGA)
    are used, the orbital frequency and "center-of-mass" is solved for self-consistently, and a vanishing ADM linear momentum is enforced.

  TOTAL_BC:
    Same as TOTAL only now the boundary condition of the lapse on the excision boundary is given by a von Neumann boundary condition
    instead of being simply fixed to a specific value.

  ECC_RED: 
    The same constraints are used as compared to solving TOTAL_BC, only now the eccentricity can be reduced either by PN estimates
    of ECC_OMEGA and ADOT or by defining them manually in the configuration file for iterative eccentricity reduction.
    The solution is then solved for using a fixed value of the orbital frequency (GLOBAL_OMEGA) which is now set to ECC_OMEGA,
    and radial infall velocity (ADOT).  
    It is important to note that this stage only reads the ECC_OMEGA and ADOT values. If one or both of these are not set or
    the (USE_PN) control is enabled, PN estimates are automatically used.

Once a solution has been obtained for a given stage, up to TOTAL_BC, the previous stages do not need to be reran for iterative changes.
For instance, if we run:

  `solve init-3d.info ./out/`

using all stages up through TOTAL_BC, we can make iterative changes to MCH to obtain additional irrotational solutions by only 
rerunning the TOTAL_BC stage. Stages are disabled successively by default during the solving routine to reflect this.

NOTE:
  1) An output directory can be specified, but is optional.

  2) Changes to mass ratio can be done simply by changing the value of Q in the configuration file and running increase resolution.  This will not only
     recalculate MCH for each BH, but also update to a better domain decomposition. Changes in Q must be done iteratively and are 
     resolution dependent. When going to mass ratios higher than q=3, it is recommended that shells are added to the smaller of the black holes, otherwise,
     the resolution of the entire space needs to be increased.  To date, Mass ratio up to q=10 have been achieved with mixed spins. Additionally,
     from the default dataset, one can make a change from Q=1 to Q=3 from a 9 pts TOTAL_BC solution, and Q=4 from an 11 pts TOTAL_BC solution.

  3) If one is making changes to the component quantities (e.g. Q, CHI, etc), it is important to note that TOTAL_BC must be ran before running ECC_RED
     since the orbital frequency is fixed. However, this is not the case when only changing resolution.

#########
increase_resolution.cpp
#########
`increase_resolution` is designed to minimize computation by running `solve` at low resolution initially (e.g. RES 9) and only run at high resolution
for the final stage(s).  The initial guess is simply the low resolution solution interpolated onto the new set of colocation points of the domain decomposition.
The computational domain is also modified slightly based on the surface radius of the BH to allow for a well-balanced domain decomposition concerning
the distances between their boundaries.

Running

  increase_resolution <filename>.info <base filename> <res>

will result in the generation of <base filename>.<info/dat> dataset with resolution <res>.
Again, one only needs to rerun the last stage the solution is from (e.g. TOTAL_BC, etc).

#########
reader.cpp
#########
`reader` is just a basic reader that prints out useful information that is obtained from the system of equations. The vast majority of the output values 
are calculated as derived quantities from the solution (i.e not pulled from the configuration file) and are meant to serve as a way to determine the
valididity of the solution.

Note:
Running `reader <filename>.info 2` will provide an alternative output format that makes it easy to export to a spreadsheet. See the src file for header names.

#########
Example test case - generating the default q=1, dist=20Msol, irrotation BBH from scratch
#########
  1) run `setup 20` to obtain an initial setup with a separation of 20Msol
  2) run `mpirun -np <num_procs> solve initbin.info` - the final solution should be converged_BBH_TOTAL_BC.20.0.0.1.q1.09.<dat/info>
  3) run `reader converged_BBH_TOTAL_BC.20.0.0.1.q1.09.info` to see interesting diagnostics
  Note: if you intend to use this solution for evolutions, activate TOTAL_BC and ECC_RED stages before running solve

#########
Example test case - iterative changes to our new BBH solution - q = 0.3, mixed spin, 11 collocation points
#########
  1) copy previous dataset - converged_BBH_TOTAL_BC.20.0.0.1.q1.09.<info/dat> to initbin.<info/dat>
  2) change "q" to 0.3
  3) change the spin, chi, of each BH - in this example, bh1.chi = 0.1, bh2.chi = -0.2
  4) run `increase_resolution initbin.info initbin 9` - mch, mirr, and radii will be calculated automatically
  5) run `mpirun -np <num_procs> solve initbin.info` - solution should be converged_BBH_TOTAL_BC.10.0.1.-0.2.1.q0.3.09.<info/dat>
  6) run `increase_resolution converged_BBH_TOTAL_BC.10.0.1.-0.2.1.q0.3.09.info initbin 11`
  7) run `solve initbin.info` - solution should be converged_BBH_TOTAL_BC.10.0.1.-0.2.1.q0.3.11.<info/dat>
  Note: 
  a) if you intend to use this solution for evolutions, activate TOTAL_BC and ECC_RED stages before running solve
  b) going to small mass ratio requires either higher resolution and/or the addition of shells around the secondary (smaller) BH.

