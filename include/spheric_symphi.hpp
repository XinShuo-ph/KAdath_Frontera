/*
    Copyright 2017 Philippe Grandclement

    This file is part of Kadath.

    Kadath is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Kadath is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Kadath.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __SPHERIC_SYMPHI_HPP_
#define __SPHERIC_SYMPHI_HPP_

#include "space.hpp"
#include "term_eq.hpp"
namespace Kadath {
/**
* Class for a spherical domain containing the origin a symmetry with respect to the plane \f$ z=0 \f$ and an quadrant symmetry wrt \f$\varphiÂ \f$.
* \li 3 dimensions.
* \li centered on the point \c center \f$(X_c, Y_c, Z_c)\f$
* \li The numerical coordinates are :
*
* \f$ 0 \leq x \leq 1 \f$
*
* \f$ 0 \leq \theta^\star \leq \pi/2 \f$
*
* \f$ 0 \leq \varphi^\star < \pi /2 \f$
*
* \li Standard spherical coordinates :
*
* \f$ r = \alpha x \f$
*
* \f$ \theta = \theta^\star \f$
*
* \f$ \varphi = \varphi^\star \f$
*
* \li Standard spherical coordinates :
*
* \f$ X = r \sin\theta \cos\varphi + Xc \f$
*
* \f$ Y = r \sin\theta \sin\varphi + Yc \f$
*
* \f$ Z = r \cos\theta + Zc \f$
* \ingroup domain
*/
class Domain_nucleus_symphi : public Domain {

 private:
  double alpha ; ///< Relates the numerical to the physical radii.
  Point center ; ///< Absolute coordinates of the center.
 
 public: 
  /**
  * Standard constructor :
  * @param num : number of the domain (used by the \c Space).
  * @param ttype [input] : Chebyshev or Legendre type of spectral expansion.
  * @param radius [input] : radius of the nucleus.
  * @param cr [input] : center of the spherical coordinates.
  * @param nbr [nbr] : number of points in each dimension.
  */
  Domain_nucleus_symphi (int num, int ttype, double radius, const Point& cr, const Dim_array& nbr) ;
  /**
   * Copy constructor
   */
  Domain_nucleus_symphi (const Domain_nucleus_symphi& so) ;
 /**
  * Constructor from a file
  * @param num : number of the domain (used by the \c Space).
  * @param fd: file containd the domain, generated by the save function.
  */
  Domain_nucleus_symphi (int num, FILE* fd) ;

  virtual ~Domain_nucleus_symphi() ; 
  virtual void save (FILE*) const ;

  private: 
    virtual void do_absol ()  const ;
    virtual void do_radius () const ; 
    virtual void do_cart ()  const ; 
    virtual void do_cart_surr () const ; 

     virtual void set_cheb_base(Base_spectral&) const;      
     virtual void set_legendre_base(Base_spectral&) const ;

     virtual void set_cheb_base_r_spher(Base_spectral&) const ;
     virtual void set_cheb_base_t_spher(Base_spectral&) const ;
     virtual void set_cheb_base_p_spher(Base_spectral&) const ;
     virtual void set_cheb_base_rt_spher(Base_spectral&) const ;
     virtual void set_cheb_base_rp_spher(Base_spectral&) const ;
     virtual void set_cheb_base_tp_spher(Base_spectral&) const ;
     virtual void set_legendre_base_r_spher(Base_spectral&) const ;
     virtual void set_legendre_base_t_spher(Base_spectral&) const ;
     virtual void set_legendre_base_p_spher(Base_spectral&) const ;

     virtual void set_cheb_base_x_cart(Base_spectral&) const ;
     virtual void set_cheb_base_y_cart(Base_spectral&) const ;
     virtual void set_cheb_base_z_cart(Base_spectral&) const ;
     virtual void set_cheb_base_xy_cart(Base_spectral&) const ;
     virtual void set_cheb_base_xz_cart(Base_spectral&) const ;
     virtual void set_cheb_base_yz_cart(Base_spectral&) const ;
     virtual void set_legendre_base_x_cart(Base_spectral&) const ;
     virtual void set_legendre_base_y_cart(Base_spectral&) const ;
     virtual void set_legendre_base_z_cart(Base_spectral&) const ;
    
   /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the radius \f$ r\f$.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forr(Base_spectral& so) const ;
    /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$x\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forx_cart(Base_spectral& so) const ;
    /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$y\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_fory_cart(Base_spectral& so) const ;
    /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$z\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forz_cart(Base_spectral& so) const ;
   /**
    * Sets the base to the standard one for Legendre polynomials for a field like the radius \f$ r\f$.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forr(Base_spectral& so) const ;
    /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$x\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forx_cart(Base_spectral& so ) const ;
 /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$y\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_fory_cart(Base_spectral& so ) const ;
    /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$z\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forz_cart(Base_spectral& so) const ;
  

     virtual void do_coloc () ;
     virtual int give_place_var (char*) const ;

  public:
    virtual double get_rmax() const {return alpha ; } ;
    virtual Point get_center () const {return center ;} ; 

    /**
     * Check whether a point lies inside \c Domain.
     * @param xx [input] : the point.
     * @param prec [input] : precision of the computation (used when comparing doubles).
     * @returns a \c true if the point is in the domain and \c false otherwise.
     */
     virtual bool is_in(const Point&xx, double prec=1e-13) const ;
    /**
     * Computes the numerical coordinates from the physical ones.
     * \li \f$ x = \displaystyle\frac{\sqrt{(X-X_c)^2+(Y-Y_c)^2+(Z-Z_c)^2}}{\alpha} \f$
     * \li \f$ \theta^\star = {\rm atan} (\displaystyle\frac{\sqrt{(X-X_c)^2+(Y-Y_c)^2}}{Z-Z_c}) \f$
     * \li \f$ \varphi^\star = {\rm atan} (\displaystyle\frac{Y-Y_c}{Z-Z_c}) \f$
     * @param xxx [input] : the absolute Cartesian \f$ (X, Y, Z) \f$ coordinates of the point.
     * @returns the numerical coordinates \f$ (x, \theta^\star, \varphi^\star) \f$.
     */
     virtual const Point absol_to_num(const Point&) const;
     
      virtual const Point absol_to_num_bound(const Point&, int) const;
      
    /**
     * Computes the derivative with respect to the absolute Cartesian coordinates from the 
     * derivative with respect to the numerical coordinates.
     * \li \f$ \displaystyle\frac{\partial f}{\partial X} = 
     *		(\sin\theta \displaystyle\frac{\partial f}{\alpha\partial x} + 
     *	\cos\theta \displaystyle\frac{\partial f}{r\partial \theta^\star}) \cos\varphi
     * - \sin\varphi \displaystyle\frac{\partial f}{r\sin\theta \partial \varphi^\star} \f$
     * \li \f$ \displaystyle\frac{\partial f}{\partial Y} = 
     *		(\sin\theta \displaystyle\frac{\partial f}{\alpha\partial x} + 
     *	\cos\theta \displaystyle\frac{\partial f}{r\partial \theta^\star}) \sin\varphi
     * + \cos\varphi \displaystyle\frac{\partial f}{r\sin\theta \partial \varphi^\star} \f$
     * \li \f$ \displaystyle\frac{\partial f}{\partial Z} = 
     * \cos\theta \displaystyle\frac{\partial f}{\alpha\partial x} 
     * - \sin\theta\displaystyle\frac{\partial f}{r\partial \theta^\star}\f$
     * @param der_var [input] : the \c ndim derivatives with respect to the numerical coordinates.
     * @param der_abs [output] : the \c ndim derivatives with respect to the absolute Cartesian coordinates.
     */
     virtual void do_der_abs_from_der_var(Val_domain** der_var, Val_domain** der_abs) const ;
    /**
     * Method for the multiplication of two \c Base_spectral.
     * @returns the output base is undefined if the result is not implemented (i.e. if one tries to multiply 
     * cosines with Chebyshev polynomials for instance).
     */
     virtual Base_spectral mult (const Base_spectral&, const Base_spectral&) const ;

	/**
	* Multiply two angular basis.
	* @param basea : first angular basis
	* @param baseb : second angular basis
	* @returns : the resulting basis ; 0 if undefined.
	*/
      int mult_base_angle_int(int basea, int baseb) const;
	/**
	* Multiply two radial basis.
	* @param basea : first radial basis
	* @param baseb : second radial basis
	* @returns : the resulting basis ; 0 if undefined.
	*/
      int mult_base_r_int(int basea, int baseb) const;

  public:
    
     virtual Val_domain mult_cos_phi (const Val_domain&) const ;
     virtual Val_domain mult_sin_phi (const Val_domain&) const ;
     virtual Val_domain mult_cos_theta (const Val_domain&) const ;
     virtual Val_domain mult_sin_theta (const Val_domain&) const ;
     virtual Val_domain div_sin_theta (const Val_domain&) const ;  
     virtual Val_domain div_cos_theta (const Val_domain&) const ;
     
     virtual Tensor change_basis_cart_to_spher (int dd, const Tensor&) const ;
     virtual Tensor change_basis_spher_to_cart (int dd, const Tensor&) const ;

     virtual Val_domain div_x (const Val_domain&) const ;     
     virtual Val_domain mult_r (const Val_domain&) const ;
     virtual Val_domain div_r (const Val_domain&) const ;
     virtual Val_domain der_r (const Val_domain&) const ;
     virtual Val_domain ddp (const Val_domain&) const ;
     virtual Val_domain srdr (const Val_domain&) const ;
     virtual Val_domain div_1mx2 (const Val_domain&) const ; 

     virtual double val_boundary (int, const Val_domain&, const Index&) const ;
     virtual void find_other_dom (int, int, int&, int&) const ;
     virtual Val_domain der_normal (const Val_domain&, int) const ;

     virtual int nbr_unknowns (const Tensor&, int) const ;
	 /**
	* Computes the number of true unknowns of a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions to determine the precise number of degrees of freedom.
	* @param so : the field.
	* @returns the number of true unknowns.
	*/
     int nbr_unknowns_val_domain (const Val_domain& so) const ;
    
     virtual Array<int> nbr_conditions (const Tensor&, int, int, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given tensorial equation in the bulk.
	* It takes into account the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order : order of the equation (i.e. 2 for a Laplacian for instance)
	* @returns the number of true unknowns.
	*/
     int nbr_conditions_val_domain (const Val_domain& eq, int order) const ;
      
     virtual Array<int> nbr_conditions_boundary (const Tensor&, int, int, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given equation on a boundary.
	* It takes into account the various Galerkin basis used.
	* It is used for implementing boundary conditions and matching ones.
	* @param eq : the residual of the equation.
	* @returns the number of true conditions.
	*/
     int nbr_conditions_val_domain_boundary (const Val_domain& eq) const ;
   
     virtual void export_tau (const Tensor&, int, int, Array<double>&, int&, const Array<int>&,  int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports a residual equation in the bulk.
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order : describes the order of the equation (2 for a Laplacian for instance).
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond : the corresponding number of equations. It is used when the equation is null.
	*/
     void export_tau_val_domain (const Val_domain& eq, int order, Array<double>& res, int& pos_res, int ncond) const ;
   
     virtual void export_tau_boundary (const Tensor&, int, int, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
     /**
	* Exports all the residual equations corresponding to a tensorial one on a given boundary
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param bound : the boundary at which the equation is enforced.
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond : the corresponding number of equations. It is used when the equation is null. 
	*/
	void export_tau_val_domain_boundary (const Val_domain& eq, int bound, Array<double>& res, int& pos_res, int ncond) const ;
   
     virtual void affecte_tau (Tensor&, int, const Array<double>&, int&) const ;
	/**
	* Affects some coefficients to a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the field to be affected.
	* @param cf : \c Array of the coefficients used.
	* @param pos_cf : current position in the array of coefficients.
	*/
     void affecte_tau_val_domain (Val_domain& so,  const Array<double>& cf, int& pos_cf) const ;
    
     virtual void affecte_tau_one_coef (Tensor&, int, int, int&) const ;
	/**
	* Sets at most one coefficient of a \c Val_domain to 1.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the \c Val_domain to be affected. It is set to zero if cc does not corresponds to another field.
	* @param cc : location, in the overall system, of the coefficient to be set to 1.
	* @param pos_cf : current position.
	*/
     void affecte_tau_one_coef_val_domain (Val_domain& so, int cc, int& pos_cf) const ;
    
     virtual double integ_volume (const Val_domain& so) const ;
     
     virtual Term_eq derive_flat_spher (int, char, const Term_eq&, const Metric*) const ;
     virtual Term_eq derive_flat_cart (int, char, const Term_eq&, const Metric*) const ;
     virtual double integ(const Val_domain& so, int bound) const ;
 
     /**
      * Sets to zero all the coefficients smaller than a given treshold.
      * Takes into account the various Galerkin basis to maintain regularity.
      * @param so : the field to be filtered.
      * @param threshold : the threshold (all the coefficients smaller than it are set to zero).
      */
     void filter_val_domain (Val_domain& so, double threshold) const ;
     virtual void filter (Tensor& tt, int dom, double threshold) const ;

public:
     virtual ostream& print (ostream& o) const ;
} ;

/**
* Class for a spherical shell and a symmetry with respect to the plane \f$ z=0 \f$ and an quadrant symmetry wrt \f$\varphiÂ \f$.
* \li 3 dimensions.
* \li centered on the point \c center \f$(X_c, Y_c, Z_c)\f$
* \li The numerical coordinates are :
*
* \f$ -1 \leq x \leq 1 \f$
*
* \f$ 0 \leq \theta^\star \leq \pi/2 \f$
*
* \f$ 0 \leq \varphi^\star \leq \pi/2 \f$
*
* \li Standard spherical coordinates :
*
* \f$ r = \alpha x + \beta \f$
*
* \f$ \theta = \theta^\star \f$
*
* \f$ \varphi = \varphi^\star \f$
*
* \li Standard spherical coordinates :
*
* \f$ X = r \sin\theta \cos\varphi + Xc \f$
*
* \f$ Y = r \sin\theta \sin\varphi + Yc \f$
*
* \f$ Z = r \cos\theta + Zc \f$
* \ingroup domain
*/
class Domain_shell_symphi : public Domain {
   
 private:
  double alpha ; ///< Relates the numerical to the physical radii.
  double beta ; ///< Relates the numerical to the physical radii.
  Point center ; ///< Absolute coordinates of the center.
 
 public:  
 /**
  * Standard constructor :
  * @param num : number of the domain (used by the \c Space).
  * @param ttype [input] : Chebyshev or Legendre type of spectral expansion.
  * @param r_int [input] : inner radius of the shell.
  * @param r_ext [input] : outer radius of the shell.
  * @param cr [input] : center of the spherical coordinates.
  * @param nbr [nbr] : number of points in each dimension.
  */
  Domain_shell_symphi (int num, int ttype, double r_int, double r_ext, const Point& cr, const Dim_array& nbr) ;
  Domain_shell_symphi (const Domain_shell_symphi& so) ; ///< Copy constructor.
 /**
  * Constructor from a file
  * @param num : number of the domain (used by the \c Space).
  * @param fd: file containd the domain, generated by the save function.
  */
  Domain_shell_symphi (int num, FILE* fd) ;

  virtual ~Domain_shell_symphi() ; ///< Destructor
  virtual void save (FILE*) const ;

  private:    
    virtual void do_absol ()  const ;
    virtual void do_radius () const ; 
    virtual void do_cart () const ;
    virtual void do_cart_surr () const ;


	 private:
     virtual void set_cheb_base(Base_spectral&) const ;  
     virtual void set_legendre_base(Base_spectral&) const ;

     virtual void set_cheb_base_r_spher(Base_spectral&) const ;
     virtual void set_cheb_base_t_spher(Base_spectral&) const ;
     virtual void set_cheb_base_p_spher(Base_spectral&) const ;
     virtual void set_cheb_base_rt_spher(Base_spectral&) const ;
     virtual void set_cheb_base_rp_spher(Base_spectral&) const ;
     virtual void set_cheb_base_tp_spher(Base_spectral&) const ;
     virtual void set_legendre_base_r_spher(Base_spectral&) const ;
     virtual void set_legendre_base_t_spher(Base_spectral&) const ;
     virtual void set_legendre_base_p_spher(Base_spectral&) const ;

     virtual void set_cheb_base_x_cart(Base_spectral&) const ;
     virtual void set_cheb_base_y_cart(Base_spectral&) const ;
     virtual void set_cheb_base_z_cart(Base_spectral&) const ;
     virtual void set_cheb_base_xy_cart(Base_spectral&) const ;
     virtual void set_cheb_base_xz_cart(Base_spectral&) const ;
     virtual void set_cheb_base_yz_cart(Base_spectral&) const ;
     virtual void set_legendre_base_x_cart(Base_spectral&) const ;
     virtual void set_legendre_base_y_cart(Base_spectral&) const ;
     virtual void set_legendre_base_z_cart(Base_spectral&) const ;
   /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the radius \f$ r\f$.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forr(Base_spectral&) const ;
/**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$x\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forx_cart(Base_spectral&) const ;
/**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$y\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_fory_cart(Base_spectral&) const ;
   /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$z\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forz_cart(Base_spectral&) const ;
 /**
    * Sets the base to the standard one for Legendre polynomials for a field like the radius \f$ r\f$.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forr(Base_spectral&) const ;
  /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$x\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forx_cart(Base_spectral&) const ;
   /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$y\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_fory_cart(Base_spectral&) const ;
    /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$z\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forz_cart(Base_spectral&) const ;
  

     virtual void do_coloc () ;
     virtual int give_place_var (char*) const ;
  public:
    virtual double get_rmax() const {return alpha+beta ; } ;
    virtual Point get_center () const {return center ;} ;

    /**
     * Check whether a point lies inside \c Domain.
     * @param xx [input] : the point.
     * @param prec [input] : precision of the computation (used when comparing doubles).
     * @returns a \c true if the point is in the domain and \c false otherwise.
     */
     virtual bool is_in(const Point&xx, double prec=1e-13) const ;
    /**
     * Computes the numerical coordinates from the physical ones.
     * \li \f$ x = \displaystyle\frac{\sqrt{(X-X_c)^2+(Y-Y_c)^2+(Z-Z_c)^2}}{\alpha} \f$
     * \li \f$ \theta^\star = {\rm atan} (\displaystyle\frac{\sqrt{(X-X_c)^2+(Y-Y_c)^2}}{Z-Z_c}) \f$
     * \li \f$ \varphi^\star = {\rm atan} (\displaystyle\frac{Y-Y_c}{Z-Z_c}) \f$
     * @param xxx [input] : the absolute Cartesian \f$ (X, Y, Z) \f$ coordinates of the point.
     * @returns the numerical coordinates \f$ (x, \theta^\star, \varphi^\star) \f$.
     */
     virtual const Point absol_to_num(const Point&) const;
     
      virtual const Point absol_to_num_bound(const Point&, int) const;
      
    /**
     * Computes the derivative with respect to the absolute Cartesian coordinates from the 
     * derivative with respect to the numerical coordinates.
     * \li \f$ \displaystyle\frac{\partial f}{\partial X} = 
     *		(\sin\theta \displaystyle\frac{\partial f}{\alpha\partial x} + 
     *	\cos\theta \displaystyle\frac{\partial f}{r\partial \theta^\star}) \cos\varphi
     * - \sin\varphi \displaystyle\frac{\partial f}{r\sin\theta \partial \varphi^\star} \f$
     * \li \f$ \displaystyle\frac{\partial f}{\partial Y} = 
     *		(\sin\theta \displaystyle\frac{\partial f}{\alpha\partial x} + 
     *	\cos\theta \displaystyle\frac{\partial f}{r\partial \theta^\star}) \sin\varphi
     * + \cos\varphi \displaystyle\frac{\partial f}{r\sin\theta \partial \varphi^\star} \f$
     * \li \f$ \displaystyle\frac{\partial f}{\partial Z} = 
     * \cos\theta \displaystyle\frac{\partial f}{\alpha\partial x} 
     * - \sin\theta\displaystyle\frac{\partial f}{r\partial \theta^\star}\f$
     * @param der_var [input] : the \c ndim derivatives with respect to the numerical coordinates.
     * @param der_abs [output] : the \c ndim derivatives with respect to the absolute Cartesian coordinates.
     */
     virtual void do_der_abs_from_der_var(Val_domain** der_var, Val_domain** der_abs) const ;
    /**
     * Method for the multiplication of two \c Base_spectral.
     * @returns the output base is undefined if the result is not implemented (i.e. if one tries to multiply 
     * cosines with Chebyshev polynomials for instance).
     */
     virtual Base_spectral mult (const Base_spectral&, const Base_spectral&) const ;
	/**
	* Multiply two angular basis.
	* @param basea : first angular basis
	* @param baseb : second angular basis
	* @returns : the resulting basis ; 0 if undefined.
	*/
      int mult_base_angle_int(int basea, int baseb) const;

  public:
     virtual Val_domain mult_cos_phi (const Val_domain&) const ;
     virtual Val_domain mult_sin_phi (const Val_domain&) const ;
     virtual Val_domain mult_cos_theta (const Val_domain&) const ;
     virtual Val_domain mult_sin_theta (const Val_domain&) const ;
     virtual Val_domain div_sin_theta (const Val_domain&) const ;  
     virtual Val_domain div_cos_theta (const Val_domain&) const ;
     
     virtual Tensor change_basis_cart_to_spher (int dd, const Tensor&) const ;
     virtual Tensor change_basis_spher_to_cart (int dd, const Tensor&) const ;

     
     virtual Val_domain mult_r (const Val_domain&) const ;
     virtual Val_domain div_r (const Val_domain&) const ;
     virtual Val_domain der_r (const Val_domain&) const ;
     virtual Val_domain der_partial_var (const Val_domain&, int) const ;
     virtual Val_domain ddp (const Val_domain&) const ;
     virtual Val_domain div_xm1 (const Val_domain&) const ;      
     virtual Val_domain mult_xm1 (const Val_domain&) const ;
     virtual Val_domain div_1mx2 (const Val_domain&) const ; 
     virtual Val_domain div_1mrsL (const Val_domain&) const ;
     virtual Val_domain mult_1mrsL (const Val_domain&) const ;

    
     virtual double val_boundary (int, const Val_domain&, const Index&) const ;
     virtual void find_other_dom (int, int, int&, int&) const ;
     virtual Val_domain der_normal (const Val_domain&, int) const ;

     virtual int nbr_unknowns (const Tensor&, int) const ;
	 /**
	* Computes the number of true unknowns of a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions to determine the precise number of degrees of freedom.
	* @param so : the field.
	* @returns the number of true unknowns.
	*/
     int nbr_unknowns_val_domain (const Val_domain& so) const ;
    
     virtual Array<int> nbr_conditions (const Tensor&, int, int, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given tensorial equation in the bulk.
	* It takes into account the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order : order of the equation (i.e. 2 for a Laplacian for instance)
	* @returns the number of true unknowns.
	*/
     int nbr_conditions_val_domain (const Val_domain& eq, int order) const ;
      
     virtual Array<int> nbr_conditions_boundary (const Tensor&, int, int, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given equation on a boundary.
	* It takes into account the various Galerkin basis used.
	* It is used for implementing boundary conditions and matching ones.
	* @param eq : the residual of the equation.
	* @returns the number of true conditions.
	*/
     int nbr_conditions_val_domain_boundary (const Val_domain& eq) const ;
   
     virtual void export_tau (const Tensor&, int, int, Array<double>&, int&, const Array<int>&,  int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports a residual equation in the bulk.
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order : describes the order of the equation (2 for a Laplacian for instance).
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond : the corresponding number of equations. It is used when the equation is null.
	*/
     void export_tau_val_domain (const Val_domain& eq, int order, Array<double>& res, int& pos_res, int ncond) const ;
   
     virtual void export_tau_boundary (const Tensor&, int, int, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
     /**
	* Exports all the residual equations corresponding to a tensorial one on a given boundary
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param bound : the boundary at which the equation is enforced.
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond : the corresponding number of equations. It is used when the equation is null. 
	*/
     void export_tau_val_domain_boundary (const Val_domain& eq, int bound, Array<double>& res, int& pos_res, int ncond) const ;
   
     virtual void affecte_tau (Tensor&, int, const Array<double>&, int&) const ;
	/**
	* Affects some coefficients to a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the field to be affected.
	* @param cf : \c Array of the coefficients used.
	* @param pos_cf : current position in the array of coefficients.
	*/
     void affecte_tau_val_domain (Val_domain& so,  const Array<double>& cf, int& pos_cf) const ;
    
     virtual void affecte_tau_one_coef (Tensor&, int, int, int&) const ;
	/**
	* Sets at most one coefficient of a \c Val_domain to 1.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the \c Val_domain to be affected. It is set to zero if cc does not corresponds to another field.
	* @param cc : location, in the overall system, of the coefficient to be set to 1.
	* @param pos_cf : current position.
	*/
     void affecte_tau_one_coef_val_domain (Val_domain& so, int cc, int& pos_cf) const ;
       
     virtual void export_tau_boundary_exception (const Tensor&, int, int, Array<double>&, int&, const Array<int>&, const Param&, int, 
							    const Tensor&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;

	/**
	* Exports all the residual equations corresponding to one tensorial one on a given boundary, excepted for some coefficients where another equation is used.
	* @param eq : the residual of the equation.
	* @param mlim :  limit for the regularity (quantum number wrt \f$\varphi\f$).
	* @param bound : the boundary at which the equation is enforced.
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond :  the corresponding number of equations. It is used when the equation is null.
	* @param param : parameters describing the coefficients where the alternative condition is enforced.
	* @param type_exception : states which type of exception (value or derivative ; current domain or the other one). Highly specialized...
	* @param exception : the equation used for the alternative condition.
	* @returns the number of true conditions.
	*/
     void export_tau_val_domain_boundary_exception (const Val_domain& eq, int mlim, int bound, Array<double>& res, int& pos_res, int ncond, const Param& param, int type_exception, const Val_domain& excpetion) const ;
     
     virtual double integ_volume (const Val_domain& so) const ;
     
     virtual Term_eq derive_flat_spher (int, char, const Term_eq&, const Metric*) const ;
     virtual Term_eq derive_flat_cart (int, char, const Term_eq&, const Metric*) const ;
     virtual double integ(const Val_domain& so, int bound) const ;
 
public:
     virtual ostream& print (ostream& o) const ;
} ;


/**
* Class for a spherical compactified domain and a symmetry with respect to the plane \f$ z=0 \f$ and a quadrant symmetry
* \li 3 dimensions.
* \li centered on the point \c center \f$(X_c, Y_c, Z_c)\f$
* \li The numerical coordinates are :
*
* \f$ -1 \leq x \leq 1 \f$
*
* \f$ 0 \leq \theta^\star \leq \pi/2 \f$
*
* \f$ 0 \leq \varphi^\star \leq /pi /2 \f$
*
* \li Standard spherical coordinates :
*
* \f$ r = \displaystyle\frac{1}{\alpha x -1}\f$
*
* \f$ \theta = \theta^\star \f$
*
* \f$ \varphi = \varphi^\star \f$
*
* \li Standard spherical coordinates :
*
* \f$ X = r \sin\theta \cos\varphi + Xc \f$
*
* \f$ Y = r \sin\theta \sin\varphi + Yc \f$
*
* \f$ Z = r \cos\theta + Zc \f$
* \ingroup domain
*/
class Domain_compact_symphi : public Domain {

 private:
  double alpha ; ///< Relates the numerical to the physical radii.
  Point center ; ///< Absolute coordinates of the center.

 public:
 /**
  * Standard constructor :
  * @param num : number of the domain (used by the \c Space).
  * @param ttype [input] : Chebyshev or Legendre type of spectral expansion.
  * @param r_int [input] : inner radius of the shell.
  * @param cr [input] : center of the spherical coordinates.
  * @param nbr [nbr] : number of points in each dimension.
  */
  Domain_compact_symphi (int num, int ttype, double r_int, const Point& cr, const Dim_array& nbr) ;
  Domain_compact_symphi (const Domain_compact_symphi& so) ; ///< Copy constructor.
/**
  * Constructor from a file
  * @param num : number of the domain (used by the \c Space).
  * @param fd: file containd the domain, generated by the save function.
  */
  Domain_compact_symphi (int num, FILE* fd) ;

  virtual ~Domain_compact_symphi () ;
  virtual void save(FILE*) const ;

  private:    
    virtual void do_absol ()  const ;
    virtual void do_radius () const ;
    virtual void do_cart () const ;
    virtual void do_cart_surr () const ;

	 private:
   
     virtual void set_cheb_base(Base_spectral&) const ;       
     virtual void set_legendre_base(Base_spectral&) const ;

     virtual void set_cheb_base_r_spher(Base_spectral&) const ;
     virtual void set_cheb_base_t_spher(Base_spectral&) const ;
     virtual void set_cheb_base_p_spher(Base_spectral&) const ;
     virtual void set_legendre_base_r_spher(Base_spectral&) const ;
     virtual void set_legendre_base_t_spher(Base_spectral&) const ;
     virtual void set_legendre_base_p_spher(Base_spectral&) const ;

     virtual void set_cheb_base_x_cart(Base_spectral&) const ;
     virtual void set_cheb_base_y_cart(Base_spectral&) const ;
     virtual void set_cheb_base_z_cart(Base_spectral&) const ;
     virtual void set_legendre_base_x_cart(Base_spectral&) const ;
     virtual void set_legendre_base_y_cart(Base_spectral&) const ;
     virtual void set_legendre_base_z_cart(Base_spectral&) const ;
    /**
    * Sets the base to the standard one for Chebyshev polynomials for a field  like the \f$x\f$ component of a vector
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forx_cart(Base_spectral&) const ;
 /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$y\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_fory_cart(Base_spectral&) const ;
  /**
    * Sets the base to the standard one for Chebyshev polynomials for a field like the \f$z\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_cheb_base_forz_cart(Base_spectral&) const ;
 /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$x\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forx_cart(Base_spectral&) const ;
  /**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$y\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_fory_cart(Base_spectral&) const ;
/**
    * Sets the base to the standard one for Legendre polynomials for a field like the \f$z\f$ component of a vector.
    *
    * @param so [output] : the returned base.
    */
     void set_legendre_base_forz_cart(Base_spectral&) const ;
  

     virtual void do_coloc () ;
     virtual int give_place_var (char*) const ;
  public:
    virtual double get_rmax() const {return alpha ; } ;
    virtual Point get_center () const {return center ;} ;

    /**
     * Check whether a point lies inside \c Domain.
     * @param xx [input] : the point.
     * @param prec [input] : precision of the computation (used when comparing doubles).
     * @returns a \c true if the point is in the domain and \c false otherwise.
     */
     virtual bool is_in(const Point&xx, double prec=1e-13) const ;
    /**
     * Computes the numerical coordinates from the physical ones.
     * \li \f$ x = \displaystyle\frac{\sqrt{(X-X_c)^2+(Y-Y_c)^2+(Z-Z_c)^2}}{\alpha} \f$
     * \li \f$ \theta^\star = {\rm atan} (\displaystyle\frac{\sqrt{(X-X_c)^2+(Y-Y_c)^2}}{Z-Z_c}) \f$
     * \li \f$ \varphi^\star = {\rm atan} (\displaystyle\frac{Y-Y_c}{Z-Z_c}) \f$
     * @param xxx [input] : the absolute Cartesian \f$ (X, Y, Z) \f$ coordinates of the point.
     * @returns the numerical coordinates \f$ (x, \theta^\star, \varphi^\star) \f$.
     */
     virtual const Point absol_to_num(const Point&) const;
     
      virtual const Point absol_to_num_bound(const Point&, int) const;
      
    /**
     * Computes the derivative with respect to the absolute Cartesian coordinates from the 
     * derivative with respect to the numerical coordinates.
     * \li \f$ \displaystyle\frac{\partial f}{\partial X} = 
     *		(\sin\theta \displaystyle\frac{\partial f}{\alpha\partial x} + 
     *	\cos\theta \displaystyle\frac{\partial f}{r\partial \theta^\star}) \cos\varphi
     * - \sin\varphi \displaystyle\frac{\partial f}{r\sin\theta \partial \varphi^\star} \f$
     * \li \f$ \displaystyle\frac{\partial f}{\partial Y} = 
     *		(\sin\theta \displaystyle\frac{\partial f}{\alpha\partial x} + 
     *	\cos\theta \displaystyle\frac{\partial f}{r\partial \theta^\star}) \sin\varphi
     * + \cos\varphi \displaystyle\frac{\partial f}{r\sin\theta \partial \varphi^\star} \f$
     * \li \f$ \displaystyle\frac{\partial f}{\partial Z} = 
     * \cos\theta \displaystyle\frac{\partial f}{\alpha\partial x} 
     * - \sin\theta\displaystyle\frac{\partial f}{r\partial \theta^\star}\f$
     * @param der_var [input] : the \c ndim derivatives with respect to the numerical coordinates.
     * @param der_abs [output] : the \c ndim derivatives with respect to the absolute Cartesian coordinates.
     */
     virtual void do_der_abs_from_der_var(Val_domain** der_var, Val_domain** der_abs) const ;
    /**
     * Method for the multiplication of two \c Base_spectral.
     * @returns the output base is undefined if the result is not implemented (i.e. if one tries to multiply 
     * cosines with Chebyshev polynomials for instance).
     */
     virtual Base_spectral mult (const Base_spectral&, const Base_spectral&) const ;

	 public:    

     virtual Tensor change_basis_cart_to_spher (int dd, const Tensor&) const ;
     virtual Tensor change_basis_spher_to_cart (int dd, const Tensor&) const ;

  
    
     virtual Val_domain mult_cos_phi (const Val_domain&) const ;   
     virtual Val_domain mult_sin_phi (const Val_domain&) const ;
     virtual Val_domain mult_cos_theta (const Val_domain&) const ;
     virtual Val_domain mult_sin_theta (const Val_domain&) const ;
     virtual Val_domain div_sin_theta (const Val_domain&) const ;   
     virtual Val_domain div_cos_theta (const Val_domain&) const ;
     virtual Val_domain div_xm1 (const Val_domain&) const ;      
     virtual Val_domain mult_xm1 (const Val_domain&) const ;          
     virtual Val_domain mult_r (const Val_domain&) const ;   
     virtual Val_domain div_r (const Val_domain&) const ;
     virtual Val_domain der_r (const Val_domain&) const ; 
     virtual Val_domain der_r_rtwo (const Val_domain&) const ;
     virtual Val_domain der_partial_var (const Val_domain&, int) const ;

     virtual void set_val_inf (Val_domain& so, double xx) const ;    

     virtual double val_boundary (int, const Val_domain&, const Index&) const ;
     virtual void find_other_dom (int, int, int&, int&) const ;
     virtual Val_domain der_normal (const Val_domain&, int) const ;

     virtual int nbr_unknowns (const Tensor&, int) const ;
	 /**
	* Computes the number of true unknowns of a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions to determine the precise number of degrees of freedom.
	* @param so : the field.
	* @returns the number of true unknowns.
	*/
     int nbr_unknowns_val_domain (const Val_domain& so) const ;
    
     virtual Array<int> nbr_conditions (const Tensor&, int, int, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given tensorial equation in the bulk.
	* It takes into account the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order : order of the equation (i.e. 2 for a Laplacian for instance)
	* @returns the number of true unknowns.
	*/
     int nbr_conditions_val_domain (const Val_domain& eq, int order) const ;
      
     virtual Array<int> nbr_conditions_boundary (const Tensor&, int, int, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given equation on a boundary.
	* It takes into account the various Galerkin basis used.
	* It is used for implementing boundary conditions and matching ones.
	* @param eq : the residual of the equation.
	* @returns the number of true conditions.
	*/
     int nbr_conditions_val_domain_boundary (const Val_domain& eq) const ;
   
     virtual void export_tau (const Tensor&, int, int, Array<double>&, int&, const Array<int>&,  int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports a residual equation in the bulk.
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order : describes the order of the equation (2 for a Laplacian for instance).
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond : the corresponding number of equations. It is used when the equation is null.
	*/
     void export_tau_val_domain (const Val_domain& eq, int order, Array<double>& res, int& pos_res, int ncond) const ;
   
     virtual void export_tau_boundary (const Tensor&, int, int, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
      /**
	* Exports all the residual equations corresponding to a tensorial one on a given boundary
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param bound : the boundary at which the equation is enforced.
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond : the corresponding number of equations. It is used when the equation is null. 
	*/
	void export_tau_val_domain_boundary (const Val_domain& eq, int bound, Array<double>& res, int& pos_res, int ncond) const ;
   
     virtual void affecte_tau (Tensor&, int, const Array<double>&, int&) const ;
	/**
	* Affects some coefficients to a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the field to be affected.
	* @param cf : \c Array of the coefficients used.
	* @param pos_cf : current position in the array of coefficients.
	*/
     void affecte_tau_val_domain (Val_domain& so,  const Array<double>& cf, int& pos_cf) const ;
    
     virtual void affecte_tau_one_coef (Tensor&, int, int, int&) const ;
	/**
	* Sets at most one coefficient of a \c Val_domain to 1.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the \c Val_domain to be affected. It is set to zero if cc does not corresponds to another field.
	* @param cc : location, in the overall system, of the coefficient to be set to 1.
	* @param pos_cf : current position.
	*/
     void affecte_tau_one_coef_val_domain (Val_domain& so, int cc, int& pos_cf) const ;
    
     virtual double integ_volume (const Val_domain& so) const ;
     
     virtual Term_eq derive_flat_spher (int, char, const Term_eq&, const Metric*) const ;
     virtual Term_eq derive_flat_cart (int, char, const Term_eq&, const Metric*) const ;
     virtual double integ(const Val_domain& so, int bound) const ;
 
public:
     virtual ostream& print (ostream& o) const ;
} ;


/**
 * The \c Space_spheric_symphi_symphi class fills the space with spherical domain(s) with symmetry in phi.
 * \ingroup domain
 */
class Space_spheric_symphi : public Space {
     public:
     /**
     * Standard constructor with only one nucleus
     * @param ttype [input] : the type of basis.
     * @param cr [input] : absolute coordinates of the center.
     * @param nbr [input] : number of points in each domain.
     * @param bound [input] : radius of the nucleus.
     */
	Space_spheric_symphi (int ttype, const Point& cr, const Dim_array& nbr, double bound) ;

	  /**
     * Standard constructor with several domains
     * @param ttype [input] : the type of basis.
     * @param cr [input] : absolute coordinates of the center.
     * @param nbr [input] : number of points in each domain.
     * @param bound [input] : radius of the nucleus.
     * @param withzec [input] : put an outer compactified domain or not ?
     */
	Space_spheric_symphi (int ttype, const Point& cr, const Dim_array& nbr, const Array<double>& bounds, bool withzec=false) ;


	Space_spheric_symphi (FILE* fd, bool withzec=false) ; ///< Constructor from a file
	virtual ~Space_spheric_symphi() ;       
	virtual void save(FILE*) const ;

	/**
	* Adds an equation being the value of some field at the origin.
	* @param syst : the \c System_of_eqs.
	* @param eq : the string describing the quantity that must be zero at the origin
	*/
	void add_eq_ori (System_of_eqs& syst, const char* eq) ;
} ;

}
#endif
