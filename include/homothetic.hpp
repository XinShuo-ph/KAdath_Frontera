/*
    Copyright 2017 Philippe Grandclement

    This file is part of Kadath.

    Kadath is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Kadath is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Kadath.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __HOMOTHETIC_HPP_
#define __HOMOTHETIC_HPP_

#include "adapted.hpp"

namespace Kadath {
/**
* Class for a spherical-like domain, having a symmetry with respect to the plane \f$ z=0 \f$.
* \li 3 dimensions.
* \li centered on the point \c center \f$(X_c, Y_c, Z_c)\f$
*
* Both boundaries are spherical but the radius of the inner boundary is an unknown.
*
* The link between numerical and physical coordinates is as follows :
*
* \f$ r = (R - r_i)/2. x + (R + r_i)/2. \f$
*
* \f$ \theta = \theta^\star \f$
*
* \f$ \varphi = \varphi^\star \f$
*
* \f$ R \f$ is the fixed outer boundary and \f$ r_i \f$ is an unknown.
* 
* \ingroup domain
*/
class Domain_shell_inner_homothetic: public Domain_shell_inner_adapted {


 public: 
   /**
  * Constructor :
  * @param sp [input] : the associated \c Space.
  * @param num : number of the domain (used by the \c Space).
  * @param ttype [input] : Chebyshev or Legendre type of spectral expansion.
  * @param rin [input] : inner radius (constant with this constructor). 
  * @param rout [input] : outer radius.
  * @param cr [input] : center of the spherical coordinates.
  * @param nbr [nbr] : number of points in each dimension.
  */
  Domain_shell_inner_homothetic (const Space& sp, int num, int ttype, double rin, double rout, const Point& cr, const Dim_array& nbr) ;
  Domain_shell_inner_homothetic (const Domain_shell_inner_homothetic & so) ; ///< Copy constructor.
/**
  * Constructor from a file
  * @param sp [input] : the associated \c Space.
  * @param num : number of the domain (used by the \c Space).
  * @param fd : the fiel (generated by the save function.
  */
  Domain_shell_inner_homothetic (const Space& sp, int num, FILE* fd) ;

  virtual ~Domain_shell_inner_homothetic () ; 
 
  virtual double integ (const Val_domain&, int) const ;
   
   virtual int nbr_unknowns_from_adapted() const ;
   virtual void affecte_coef (int&, int, bool&) const ;
   virtual void xx_to_vars_from_adapted (Val_domain&, const Array<double>&, int&) const ;
   virtual void xx_to_ders_from_adapted (const Array<double>&, int&) const ;
   virtual void update_constante (const Val_domain&, const Scalar&, Scalar&) const ;   
   virtual Term_eq integ_term_eq (const Term_eq&, int) const ;
   
public:
     virtual ostream& print (ostream& o) const ;
          
   friend class Space_spheric_adapted ;   
   friend class Space_bin_ns ;
   friend class Space_bhns ;
} ;
/**
* Class for a spherical-like domain, having a symmetry with respect to the plane \f$ z=0 \f$.
* \li 3 dimensions.
* \li centered on the point \c center \f$(X_c, Y_c, Z_c)\f$
*
* Both boundaries are spherical but the radius of the inner boundary is an unknown.
*
* The link between numerical and physical coordinates is as follows :
*
* \f$ r = (r_o - R)/2. x + (r_o + R)/2. \f$
*
* \f$ \theta = \theta^\star \f$
*
* \f$ \varphi = \varphi^\star \f$
*
* \f$ R \f$ is the fixed inner boundary and \f$ r_o \f$ is an unknown.
* 
* \ingroup domain
*/
class Domain_shell_outer_homothetic: public Domain_shell_outer_adapted {


 public: 
  /**
  * Constructor :
  * @param sp [input] : the associated \c Space.
  * @param num : number of the domain (used by the \c Space).
  * @param ttype [input] : Chebyshev or Legendre type of spectral expansion.
  * @param rin [input] : inner radius.
  * @param rout [input] : outer radius (constant with this constructor).
  * @param cr [input] : center of the spherical coordinates.
  * @param nbr [nbr] : number of points in each dimension.
  */
  Domain_shell_outer_homothetic (const Space& sp, int num, int ttype, double rin, double rout, const Point& cr, const Dim_array& nbr) ;
  Domain_shell_outer_homothetic (const Domain_shell_outer_homothetic & so) ; ///< Copy constructor.
 /**
  * Constructor from a file
  * @param sp [input] : the associated \c Space.
  * @param num : number of the domain (used by the \c Space).
  * @param fd : the file (generated by the save function.
  */
  Domain_shell_outer_homothetic (const Space& sp, int num, FILE* fd) ;

  virtual ~Domain_shell_outer_homothetic () ; ///< Destructor
 
   
   virtual int nbr_unknowns_from_adapted() const ;
   virtual void affecte_coef (int&, int, bool&) const ;
   virtual void xx_to_vars_from_adapted (Val_domain&, const Array<double>&, int&) const ;
   virtual void xx_to_ders_from_adapted (const Array<double>&, int&) const ;
   virtual void update_constante (const Val_domain&, const Scalar&, Scalar&) const ;   
  
public:
     virtual ostream& print (ostream& o) const ;
          
   friend class Space_spheric_adapted ;   
   friend class Space_bin_ns ;
   friend class Space_bhns ;
} ;
}
#endif
