/*
    Copyright 2017 Philippe Grandclement

    This file is part of Kadath.

    Kadath is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Kadath is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Kadath.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __BASE_TENSOR_HPP_
#define __BASE_TENSOR_HPP_



// Headers C
#include "headcpp.hpp"
#include "space.hpp"
#include "memory.hpp"

// Types of basis :
#define CARTESIAN_BASIS 0
#define SPHERICAL_BASIS 1
#define MTZ_BASIS 2

namespace Kadath {

		    //-----------------------------------//
		    //	    class Base_tensor            //
		    //-----------------------------------//

/**
 * Describes the tensorial basis used by the various tensors.
 * In each \c Domain it stores an integer describing the basis.
 * Possible choices :
 * \li CARTESIAN_BASIS : Cartesian
 * \li SPHERICAL_BASIS : orthonormal spherical.
 * \li MTZ_BASIS : orthonormal basis, assuming the constant radius sections have a negative curvature.
 * \ingroup fields
 */
class Base_tensor : public MemoryMappable {

    // Data :
    // -----
    protected:
	const Space& space ; ///< The associated \c Space
	Array<int> basis ; ///< The basis in each \c Domain.


    // Constructors - Destructor
    // -------------------------

  public:
	/**
	* Constructor, does not affect anything.
        * @param  spa : the \c Space.
	**/
	explicit Base_tensor(const Space& spa) ;
	/**
	* Constructor where the basis is the same everywhere.
        * @param  spa : the \c Space.
	* @param bb : input basis.
	**/
	Base_tensor (const Space& spa, int bb) ;
	Base_tensor(const Base_tensor& ) ;	///< Copy constructor
	/**
	* Constructor from a file.
	* @param spa : the \c Space.
	* @param fd : the file (generated by save.
	*/
	Base_tensor (const Space& spa, FILE* fd) ;
	virtual ~Base_tensor() ;			///< Destructor

    public:

	int& set_basis(int) ; ///< Read/write the basis in a given domain
	int get_basis (int) const ; ///< Read only the basis in a given domain
	void operator= (const Base_tensor&) ; ///< Affectation operator

	/**
	* @returns : the \c Space (read only)/
	*/
	const Space& get_space () const {return space;} ;

	void save (FILE*) const ; ///< Saving function

    // Outputs
    // -------
    friend ostream& operator<<(ostream& , const Base_tensor& ) ; ///< Display
    friend bool operator== (const Base_tensor&, const Base_tensor&) ; ///< Tests equality of two basis.
    friend bool operator!= (const Base_tensor&, const Base_tensor&) ; ///< Tests the difference of two basis.
};

}
#endif
