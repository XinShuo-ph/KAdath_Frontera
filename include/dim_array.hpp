/*
    Copyright 2017 Philippe Grandclement

    This file is part of Kadath.

    Kadath is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Kadath is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Kadath.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __DIM_ARRAY_HPP_
#define __DIM_ARRAY_HPP_

#include "headcpp.hpp"
#include "memory.hpp"

namespace Kadath {
/**
* Class for storing the dimensions of an array
*
* It simply consists of a list of integers, being the size of a given \c Array, in each
* dimension.
* \ingroup util
**/

class Dim_array : public MemoryMappable {
    protected:
        int ndim ; ///< Number of dimensions.
	int* nbr ; ///< Size of the \c Array in each dimension.

    public:
	/** Standard constructor
	* @param nd [input] number of dimensions. The sizes are not initialized.
	**/
        explicit Dim_array (int) ;
	Dim_array (const Dim_array&) ; ///< Constructor by copy.
	Dim_array (FILE*) ; ///< Constructor from a file (previously generated by the save member)
	~Dim_array() ; ///< Destructor

	/**
	* Read/write of the size of a given dimension.
	* @param i [input] dimension.
	*/
	int& set(int i) ;
	/**
	* Read only of the size of a given dimension.
	* @param i [input] dimension.
	*/
	int operator() (int i) const ;
	/**
	* Returns the number of dimensions.
	*/
	int get_ndim() const {return ndim ;} ;
	void operator= (const Dim_array&) ; ///< Assignement to annother \c Dim_array.

	void save (FILE*) const ; ///< Save function

	template <class> friend class Array ;
	friend ostream& operator<< (ostream&, const Dim_array&) ;
	friend bool operator== (const Dim_array&, const Dim_array&) ;
	friend bool operator!= (const Dim_array&, const Dim_array&) ;
} ;

ostream& operator<< (ostream&, const Dim_array&) ;
bool operator== (const Dim_array&, const Dim_array&) ;

}

#include "implementation/dim_array.cpp"

#endif
