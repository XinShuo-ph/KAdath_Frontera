/*
    Copyright 2017 Philippe Grandclement

    This file is part of Kadath.

    Kadath is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Kadath is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Kadath.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __SPHERIC_TIME_HPP_
#define __SPHERIC_TIME_HPP_

#include "space.hpp"

namespace Kadath {

/**
* Class for a 2-dimensional spherical domain containing the origin and a symetry with respect to the plane \f$ z=0 \f$.
* The second dimension is the time, being bounded on a given interval, without any periodicity.
* 
* \li The numerical coordinates are :
*
* \f$ 0 \leq x \leq 1 \f$
*
* \f$ -1 \leq t^\star \leq 1 \f$

* \li Standard spherical coordinates :
*
* \f$ r = \alpha x \f$
*
* \f$ t = \left (t_{\rm max} + t_{\rm min} \right)/2 \times t^\star + \left (t_{\rm max} - t_{\rm min} \right)/2\f$
*
* \ingroup domain
*/
class Domain_spheric_time_nucleus : public Domain {

 private:
  double alpha ; ///< Relates the numerical to the physical radii.
  double tmin; ///< Initial time \f$ t_{\rm min} \f$.
  double tmax ; ///<Final time \f$ t_{\rm max} \f$.
 
 public: 
   /**
  * Standard constructor :
  * @param num : number of the domain (used by the \c Space).
  * @param ttype : Chebyshev or Legendre type of spectral expansion.
  * @param tmmin :  Initial time.
  * @param tmmax :  Final time/
  * @param radius : radius of the nucleus.
  * @param nbr : number of points in each dimension.
  */
  Domain_spheric_time_nucleus (int num, int ttype, double tmmin, double tmmax, double radius, const Dim_array& nbr) ;
  Domain_spheric_time_nucleus (const Domain_spheric_time_nucleus& so) ; ///< Copy constructor.
/**
  * Constructor from a file
  * @param num : number of the domain (used by the \c Space).
  * @param ff: file containd the domain, generated by the save function.
  */
  Domain_spheric_time_nucleus (int num, FILE* ff) ;

  virtual ~Domain_spheric_time_nucleus() ;
  virtual void save (FILE*) const ;

  private:    
    virtual void do_absol ()  const ;

  private:
     virtual void set_cheb_base(Base_spectral&) const ;       
     virtual void set_legendre_base(Base_spectral&) const ;    
     virtual void do_coloc () ;
     virtual void do_radius () const ;
     
  public:
     virtual bool is_in(const Point&xx, double prec=1e-13) const ;
     virtual const Point absol_to_num(const Point&) const;
     virtual void do_der_abs_from_der_var(Val_domain** der_var, Val_domain** der_abs) const ;
     virtual Base_spectral mult (const Base_spectral&, const Base_spectral&) const ;
    /**
     * @returns : the \f$ \alpha \f$ of the mapping.
     */
     double get_alpha () const {return alpha ;} ;

  public:
     virtual Val_domain div_x (const Val_domain&) const ;     
     virtual Val_domain mult_r (const Val_domain&) const ;
     virtual Val_domain div_r (const Val_domain&) const ;
     virtual Val_domain laplacian (const Val_domain&, int) const ;
     virtual Val_domain der_r (const Val_domain&) const ; 
     virtual Val_domain srdr (const Val_domain&) const ;
     virtual Val_domain ddt (const Val_domain&) const ;
     virtual Val_domain dt (const Val_domain&) const ;

     virtual double val_boundary (int, const Val_domain&, const Index&) const ;
     virtual void find_other_dom (int, int, int&, int&) const ;
     virtual Val_domain der_normal (const Val_domain&, int) const ;

     virtual int nbr_unknowns (const Tensor&, int) const ;
	/**
	* Computes the number of true unknowns of a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions to determine the precise number of degrees of freedom.
	* @param so : the field.
	* @returns the number of true unknowns.
	*/
     int nbr_unknowns_val_domain (const Val_domain& so) const ;
     virtual Array<int> nbr_conditions_array (const Tensor&, int, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given tensorial equation in the bulk.
	* It takes into account the various Galerkin basis used.
	* @param so : the residual of the equation.
	* @param order : order of the equation in each dimension.
	* @returns the number of true unknowns.
	*/
     int nbr_conditions_val_domain_array (const Val_domain& so, const Array<int>& order) const ;
     virtual Array<int> nbr_conditions_boundary_array (const Tensor&, int, int, const Array<int>&,  int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
       /**
	* Computes number of discretized equations associated with a given equation on a boundary.
	* It takes into account the various Galerkin basis used.
	* It is used for implementing boundary conditions and matching ones.
	* @param eq : the residual of the equation.
	* @param bound : which boundary.
	* @param order : order of the equation in each dimension (not used for the one corresponding to the boundary).
	* @returns the number of true conditions.
	*/     
     int nbr_conditions_val_domain_boundary_array (const Val_domain& eq, int bound,  const Array<int>& order) const ;
     virtual void export_tau_array (const Tensor&, int, const Array<int>&, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports a residual equation in the bulk.
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order :  order of the equation in each dimension.
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond :  the corresponding number of equations. It is used when the equation is null.
	*/
     void export_tau_val_domain_array (const Val_domain& eq, const Array<int>& order, Array<double>& res, int& pos_res, int ncond) const ;
     virtual void export_tau_boundary_array (const Tensor&, int, int, const Array<int>&, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports all the residual equations corresponding to a tensorial one on a given boundary
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param bound : the boundary at which the equation is enforced.
	* @param order : order of the equation in each dimension (not used for the one corresponding to the boundary).
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond :  the corresponding number of equations. It is used when the residual is null.
	*/
     void export_tau_val_domain_boundary_array (const Val_domain& eq, int bound, const Array<int>& order, Array<double>& res, int& pos_res, int ncond) const ;
     virtual void affecte_tau (Tensor&, int, const Array<double>&, int&) const ;
     /**
	* Affects some coefficients to a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the field to be affected.
	* @param cf : \c Array of the coefficients used.
	* @param pos_cf : current position in the array of coefficients.
	*/
     void affecte_tau_val_domain (Val_domain& so, const Array<double>& cf, int& pos_cf) const ;
     virtual void affecte_tau_one_coef (Tensor&, int, int, int&) const ;
	/**
	* Sets at most one coefficient of a \c Val_domain to 1.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the \c Val_domain to be affected. It is set to zero if cc does not corresponds to another field.
	* @param cc : location, in the overall system, of the coefficient to be set to 1.
	* @param pos_cf : current position.
	*/
     void affecte_tau_one_coef_val_domain (Val_domain& so, int cc, int& pos_cf) const ;

public:
     virtual ostream& print (ostream& o) const ;
} ;

/**
* Class for a 2-dimensional spherical domain bounded between two finite radii and a symetry with respect to the plane \f$ z=0 \f$.
* The second dimension is the time, being bounded on a given interval, without any periodicity.
* 
* \li The numerical coordinates are :
*
* \f$ -1 \leq x \leq 1 \f$
*
* \f$ -1 \leq t^\star \leq 1 \f$

* \li Standard spherical coordinates :
*
* \f$ r = \alpha x + \beta \f$
*
* \f$ t = \left (t_{\rm max} + t_{\rm min} \right)/2 \times t^\star + \left (t_{\rm max} - t_{\rm min} \right)/2\f$
*
* \ingroup domain
*/
class Domain_spheric_time_shell : public Domain {

 private:
  double alpha ; ///< Relates the numerical to the physical radii.
  double beta ; ///< Relates the numerical to the physical radii.
  double tmin ; ///< Initial time \f$ t_{\rm min} \f$.
  double tmax ; ///<Final time \f$ t_{\rm max} \f$.

 public:  
    /**
  * Standard constructor :
  * @param num : number of the domain (used by the \c Space).
  * @param ttype : Chebyshev or Legendre type of spectral expansion.
  * @param tmmin :  Initial time.
  * @param tmmax :  Final time/
  * @param r_int : inner radius.
  * @param r_out : outer radius.
  * @param nbr : number of points in each dimension.
  */
  Domain_spheric_time_shell (int num, int ttype, double tmmin, double tmmax , double r_int, double r_ext, const Dim_array& nbr) ;
  Domain_spheric_time_shell (const Domain_spheric_time_shell& so) ; ///< Copy constructor.
/**
  * Constructor from a file
  * @param num : number of the domain (used by the \c Space).
  * @param ff: file containd the domain, generated by the save function.
  */
  Domain_spheric_time_shell (int num, FILE* ff) ;

  virtual ~Domain_spheric_time_shell() ;
  virtual void save (FILE*) const ;

  private:    
    virtual void do_absol ()  const ;

  private :
     virtual void set_cheb_base(Base_spectral&) const ;  
     virtual void set_legendre_base(Base_spectral&) const ;      
     virtual void do_coloc () ;
     virtual void do_radius () const ;
     
  public:     
     virtual bool is_in(const Point& xx, double prec=1e-13) const ;
     virtual const Point absol_to_num(const Point&) const;
     virtual void do_der_abs_from_der_var(Val_domain** der_var, Val_domain** der_abs) const ;
   
     virtual Base_spectral mult (const Base_spectral&, const Base_spectral&) const ;
 	/**
     * @returns : the \f$ \alpha \f$ of the mapping.
     */
     double get_alpha () const {return alpha ;} ;

  public:   
     virtual Val_domain mult_r (const Val_domain&) const ;
     virtual Val_domain div_r (const Val_domain&) const ;
     virtual Val_domain laplacian (const Val_domain&, int) const ;
     virtual Val_domain der_r (const Val_domain&) const ;
     virtual Val_domain ddt (const Val_domain&) const ;
     virtual Val_domain dt (const Val_domain&) const ;

     virtual void find_other_dom (int, int, int&, int&) const ;     
     virtual Val_domain der_normal (const Val_domain&, int) const ;
     virtual double val_boundary (int, const Val_domain&, const Index&) const ;
     
     virtual int nbr_unknowns (const Tensor&, int) const ;
	/**
	* Computes the number of true unknowns of a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions to determine the precise number of degrees of freedom.
	* @param so : the field.
	* @returns the number of true unknowns.
	*/
     int nbr_unknowns_val_domain (const Val_domain& so) const ;
     virtual Array<int> nbr_conditions_array (const Tensor&, int, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given tensorial equation in the bulk.
	* It takes into account the various Galerkin basis used.
	* @param so : the residual of the equation.
	* @param order : order of the equation in each dimension.
	* @returns the number of true unknowns.
	*/
     int nbr_conditions_val_domain_array (const Val_domain& so, const Array<int>& order) const ;
     virtual Array<int> nbr_conditions_boundary_array (const Tensor&, int, int, const Array<int>&,  int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
     /**
	* Computes number of discretized equations associated with a given equation on a boundary.
	* It takes into account the various Galerkin basis used.
	* It is used for implementing boundary conditions and matching ones.
	* @param eq : the residual of the equation.
	* @param bound : which boundary.
	* @param order : order of the equation in each dimension (not used for the one corresponding to the boundary).
	* @returns the number of true conditions.
	*/ 
     int nbr_conditions_val_domain_boundary_array (const Val_domain& eq, int bound,  const Array<int>& order) const ;
     virtual void export_tau_array (const Tensor&, int, const Array<int>&, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports a residual equation in the bulk.
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order :  order of the equation in each dimension.
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond :  the corresponding number of equations. It is used when the equation is null.
	*/
     void export_tau_val_domain_array (const Val_domain& eq, const Array<int>& order, Array<double>& res, int& pos_res, int ncond) const ;
     virtual void export_tau_boundary_array (const Tensor&, int, int, const Array<int>&, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports all the residual equations corresponding to a tensorial one on a given boundary
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param bound : the boundary at which the equation is enforced.
	* @param order : order of the equation in each dimension (not used for the one corresponding to the boundary).
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond :  the corresponding number of equations. It is used when the residual is null.
	*/
     void export_tau_val_domain_boundary_array (const Val_domain& eq, int bound, const Array<int>& order, Array<double>& res, int& pos_res, int ncond) const ;
     virtual void affecte_tau (Tensor&, int, const Array<double>&, int&) const ;
	  /**
	* Affects some coefficients to a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the field to be affected.
	* @param cf : \c Array of the coefficients used.
	* @param pos_cf : current position in the array of coefficients.
	*/
     void affecte_tau_val_domain (Val_domain& so, const Array<double>& cf, int& pos_cf) const ;
     virtual void affecte_tau_one_coef (Tensor&, int, int, int&) const ;
	/**
	* Sets at most one coefficient of a \c Val_domain to 1.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the \c Val_domain to be affected. It is set to zero if cc does not corresponds to another field.
	* @param cc : location, in the overall system, of the coefficient to be set to 1.
	* @param pos_cf : current position.
	*/
    void affecte_tau_one_coef_val_domain (Val_domain& so, int cc, int& pos_cf) const ;
  
public:
     virtual ostream& print (ostream& o) const ;
} ;

/**
* Class for a 2-dimensional compactified spherical domain and a symetry with respect to the plane \f$ z=0 \f$.
* The second dimension is the time, being bounded on a given interval, without any periodicity.
* 
* \li The numerical coordinates are :
*
* \f$ -1 \leq x \leq 1 \f$
*
* \f$ -1 \leq t^\star \leq 1 \f$

* \li Standard spherical coordinates :
*
* \f$ r = \frac{1}{\alpha \left(x-1\right)} \f$
*
* \f$ t = \left (t_{\rm max} + t_{\rm min} \right)/2 \times t^\star + \left (t_{\rm max} - t_{\rm min} \right)/2\f$
*
* \ingroup domain
*/
class Domain_spheric_time_compact : public Domain {

 private:
  double alpha ; ///< Relates the numerical to the physical radii.
  double tmin ; ///< Initial time \f$ t_{\rm min} \f$.
  double tmax ; ///<Final time \f$ t_{\rm max} \f$.

 public:  
   /**
  * Standard constructor :
  * @param num : number of the domain (used by the \c Space).
  * @param ttype : Chebyshev or Legendre type of spectral expansion.
  * @param tmmin :  Initial time.
  * @param tmmax :  Final time/
  * @param r_int : inner radius.
  * @param nbr : number of points in each dimension.
  */
  Domain_spheric_time_compact (int num, int ttype, double tmmin, double tmmax , double r_int, const Dim_array& nbr) ;
  Domain_spheric_time_compact (const Domain_spheric_time_compact& so) ; ///< Copy constructor.
/**
  * Constructor from a file
  * @param num : number of the domain (used by the \c Space).
  * @param ff: file containd the domain, generated by the save function.
  */
  Domain_spheric_time_compact (int num, FILE* ff) ;

  virtual ~Domain_spheric_time_compact() ; 
  virtual void save (FILE*) const ;

  private:    
    virtual void do_absol ()  const ;

  private :
     virtual void set_cheb_base(Base_spectral&) const ;  
     virtual void set_legendre_base(Base_spectral&) const ;      
     virtual void do_coloc () ;
     virtual void do_radius () const ;
     
  public:     
     virtual bool is_in(const Point& xx, double prec=1e-13) const ;
     virtual const Point absol_to_num(const Point&) const;
     virtual void do_der_abs_from_der_var(Val_domain** der_var, Val_domain** der_abs) const ;
   
     virtual Base_spectral mult (const Base_spectral&, const Base_spectral&) const ;
	/**
     * @returns : the \f$ \alpha \f$ of the mapping.
     */
     double get_alpha () const {return alpha ;} ;

  public:   
     virtual Val_domain mult_xm1 (const Val_domain&) const ;
     virtual Val_domain div_xm1 (const Val_domain&) const ;
     virtual Val_domain mult_r (const Val_domain&) const ;
     virtual Val_domain div_r (const Val_domain&) const ;
     virtual Val_domain der_r (const Val_domain&) const ;
     virtual Val_domain ddt (const Val_domain&) const ;
     virtual Val_domain dt (const Val_domain&) const ;
     virtual Val_domain laplacian (const Val_domain&, int) const ;
  
     virtual void find_other_dom (int, int, int&, int&) const ;     
     virtual Val_domain der_normal (const Val_domain&, int) const ;
     virtual double val_boundary (int, const Val_domain&, const Index&) const ;
     
     virtual int nbr_unknowns (const Tensor&, int) const ;
	/**
	* Computes the number of true unknowns of a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions to determine the precise number of degrees of freedom.
	* @param so : the field.
	* @returns the number of true unknowns.
	*/
     int nbr_unknowns_val_domain (const Val_domain& so) const ;
     virtual Array<int> nbr_conditions_array (const Tensor&, int, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Computes number of discretized equations associated with a given tensorial equation in the bulk.
	* It takes into account the various Galerkin basis used.
	* @param so : the residual of the equation.
	* @param order : order of the equation in each dimension.
	* @returns the number of true unknowns.
	*/
     int nbr_conditions_val_domain_array (const Val_domain& so, const Array<int>& order) const ;
     virtual Array<int> nbr_conditions_boundary_array (const Tensor&, int, int, const Array<int>&,  int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	 /**
	* Computes number of discretized equations associated with a given equation on a boundary.
	* It takes into account the various Galerkin basis used.
	* It is used for implementing boundary conditions and matching ones.
	* @param eq : the residual of the equation.
	* @param bound : which boundary.
	* @param order : order of the equation in each dimension (not used for the one corresponding to the boundary).
	* @returns the number of true conditions.
	*/  
     int nbr_conditions_val_domain_boundary_array (const Val_domain& eq, int bound,  const Array<int>& order) const ;
     virtual void export_tau_array (const Tensor&, int, const Array<int>&, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports a residual equation in the bulk.
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param order :  order of the equation in each dimension.
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond :  the corresponding number of equations. It is used when the equation is null.
	*/
     void export_tau_val_domain_array (const Val_domain& eq, const Array<int>& order, Array<double>& res, int& pos_res, int ncond) const ;
     virtual void export_tau_boundary_array (const Tensor&, int, int, const Array<int>&, Array<double>&, int&, const Array<int>&, int n_cmp=-1, Array<int>** p_cmp=0x0) const ;
	/**
	* Exports all the residual equations corresponding to a tensorial one on a given boundary
	* It makes use of the various Galerkin basis used.
	* @param eq : the residual of the equation.
	* @param bound : the boundary at which the equation is enforced.
	* @param order : order of the equation in each dimension (not used for the one corresponding to the boundary).
	* @param res : The \c Array where the discretized equations are stored.
	* @param pos_res : current position in res.
	* @param ncond :  the corresponding number of equations. It is used when the residual is null.
	*/
     void export_tau_val_domain_boundary_array (const Val_domain& eq, int bound, const Array<int>& order, Array<double>& res, int& pos_res, int ncond) const ;
     virtual void affecte_tau (Tensor&, int, const Array<double>&, int&) const ;
 /**
	* Affects some coefficients to a \c Val_domain.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the field to be affected.
	* @param cf : \c Array of the coefficients used.
	* @param pos_cf : current position in the array of coefficients.
	*/
     void affecte_tau_val_domain (Val_domain& so, const Array<double>& cf, int& pos_cf) const ;
     virtual void affecte_tau_one_coef (Tensor&, int, int, int&) const ;
	/**
	* Sets at most one coefficient of a \c Val_domain to 1.
	* It takes into account the various symmetries and regularity conditions (by means of Garlekin basis).
	* @param so : the \c Val_domain to be affected. It is set to zero if cc does not corresponds to another field.
	* @param cc : location, in the overall system, of the coefficient to be set to 1.
	* @param pos_cf : current position.
	*/
     void affecte_tau_one_coef_val_domain (Val_domain& so, int cc, int& pos_cf) const ;
  
public:
     virtual ostream& print (ostream& o) const ;
} ;

/**
 * The \c Space_oned class fills the space with 2-dimensioanl domains : spherically symmetric and time dependant.
 * \ingroup domain
 */
class Space_spheric_time : public Space {
  
     protected:
	double tmin ; ///< Initial time \f$ t_{\rm min} \f$.
	double tmax ; ///<Final time \f$ t_{\rm max} \f$.
	bool withcompact ; ///< Indicator of the presence of a compactified \c Domain.
	
     public:
        /**
     	* Standard constructor 
     	* @param ttype [input] : the type of basis.	
	* @param nbr [input] : number of points in each domain.
	* @param bounds [input] : radii of the various shells (and also determines the total number of domains).
        * @param tmmin :  Initial time.
        * @param tmmax :  Final time.
	* @param wc[input] : With a compactified domain or not ?
	*/
	Space_spheric_time (int ttype, const Dim_array& nbr, const Array<double>& bounds, double tmmin, double tmmax, bool wc = false) ;
	Space_spheric_time (FILE*) ; ///< Constructor from a file.
	virtual ~Space_spheric_time() ;         
	virtual void save(FILE*) const ;
	
	/**
	* Returns the final time.
	*/
	double get_tmax() const {return tmax ;} ;

	/**
	* Returns the initial time.
	*/
	double get_tmin() const {return tmin ;} ;
} ;
}
#endif
